angular.module('well', [
  'ngRoute',
  'firebase',
  'well.controllers',
  'well.filters',
  'well.services',
  'well.directives'
])
.config(function ($routeProvider, $locationProvider) {
  $routeProvider
    .when('/', {
      templateUrl: 'landing.html'
    })
    .when('/login', {
      templateUrl: 'login.html'
    })
    .when('/signup', {
      templateUrl: 'signup.html'
    })
    .when('/survey', {
      templateUrl: 'survey.html',
      controller: 'SurveyCtrl'
    })
    .when('/tradeoff', {
      templateUrl: 'tradeoff.html',
      controller: 'TradeOffCtrl'
    })
    .otherwise({
      redirectTo: '/'
    })

  // $locationProvider.html5Mode(true)
})

/* Services */

angular.module('well.services', [])
  .factory('Aspects', function () {
    var names = ['health', 'happiness', 'freedom', 'financial security', 'physical security']

    return {
      names: function () {
        return names
      }
    }
  })
  .factory('Survey', function (Aspects) {
    var aspects = Aspects.names(),
      responses = {}
    for (var i in aspects) {
      responses[aspects[i]] = {}
      responses[aspects[i]].level = null
    }
    return {
      responses: function () {
        return responses
      },
      respond: function (aspect, level) {
        console.log(level)
        responses[aspect].level = level
        console.log(responses)
      },
      responded: function () {
        return aspects.every(function (a) {
          return responses[a].level
        })
      },
      randomize: function () {
        for (var i in aspects) {
          responses[aspects[i]].level = Math.ceil(Math.random() * 100)
        }
      }
    }
  })
  .factory('TradeOff', function (Aspects, Survey) {
    var aspects = Aspects.names(),
      responses = Survey.responses(),
              n = 0,
              i = 1,
           left = JSON.parse(JSON.stringify(responses)),
          right = JSON.parse(JSON.stringify(responses)),
              a = left[aspects[n]],
              b = right[aspects[i]],
        choices = []

    function record (p) {
      choices.push({
        a: n,
        b: i,
        a_d: a.diff,
        b_d: b.diff,
        p: p,
        t: Date.now()
      })
    }

    function gcd (n, d) {
      if (d) {
        return gcd (d, n % d)
      } else {
        return Math.abs(n)
      }
    }

    function simplify (f) {
      var div = gcd(f[0], f[1])
      return [f[0] / div, f[1] / div]
    }

    function median (f1, f2) {
      var f = []
      f[0] = f1[0] * f2[1] + f2[0] * f1[1]
      f[1] = f1[1] * f2[1] * 2
      return simplify(f)
    }

    for (var k in responses) {
      responses[k].lower = null
      responses[k].upper = null
    }
    responses[aspects[n]].lower = [1, 1]
    responses[aspects[n]].upper = [1, 1]

    var service = {
      left: function () {
        return left
      },
      right: function () {
        return right
      },
      responses: function () {
        return responses
      },
      choose: function (p) {
        this.init(p)
      },
      loadChoice: function () {
        if (!Survey.responded()) Survey.randomize()
        responses = Survey.responses()

        a = left[aspects[n]],
        b = right[aspects[i]]

        a.diff = b.diff = (100 - a.level > 4 && 100 - b.level > 4) ? 5 : Math.min(100 - a.level, 100 - b.level)
        
        this.choose = this.init
        return [left, right]
      },
      init: function (p) {
        record(p)
        if (p < 0) {
          responses[aspects[i]].upper = [1, 1]
          if (a.diff === 1) {
            responses[aspects[i]].lower = [0, 1]
            this.next()
          } else {
            a.diff = 1
            this.choose = function (p) {
              record(p)
              if (p < 0) {
                responses[aspects[i]].upper = simplify([1, b.diff])
                this.halve()
              } else {
                responses[aspects[i]].lower = simplify([1, b.diff])
                this.hone()
              }
              return [left, right]
            }
          }
        } else {
          responses[aspects[i]].lower = [1, 1]
          if (a.diff === 1) {
            responses[aspects[i]].upper = [1, 0]
            this.next()
          } else {
            b.diff = 1
            this.choose = function (p) {
              record(p)
              if (p < 0) {
                responses[aspects[i]].upper = simplify([a.diff, b.diff])
                this.hone()
              } else {
                responses[aspects[i]].lower = simplify([a.diff, b.diff])
                this.twice()
              }
              return [left, right]
            }
          }
        }
        return [left, right]
      },
      halve: function () {
        if (b.diff * 2 > 100 - b.level) {
          this.next()
        } else {
          b.diff *= 2
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = simplify([a.diff, b.diff])
              this.halve()
            } else {
              responses[aspects[i]].lower = simplify([a.diff, b.diff])
              this.next()
            }
            return [left, right]
          }
        }
      },
      twice: function () {
        if (a.diff * 2 > 100 - a.level) {
          next()
        } else {
          a.diff *= a
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = simplify([a, b])
              this.next()
            } else {
              responses[aspects[i]].lower = simplify([a, b])
              this.twice()
            }
            return [left, right]
          }
        }
      },
      hone: function () {
        var u = responses[aspects[i]].upper,
            l = responses[aspects[i]].lower,
           ab = median(l, u)

        ab[0] = Math.round(5 * ab[0] / ab[1])
        ab[1] = 5
        console.log(ab)

        if (simplify(ab)[0] === u[0] || simplify(ab)[0] === l[0]) {
          console.log('eh')
          this.next()
        } else {
          a.diff = ab[0]
          b.diff = ab[1]
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = ab
            } else {
              responses[aspects[i]].lower = ab
            }
            this.hone()
            return [left, right]
          }
        }
      },
      next: function () {
        b.diff = 0
        i += 1
        if (i === aspects.length) {
          this.finish()
        } else {
          this.loadChoice()
        }
      },
      finish: function () {
        alert('finished')
      }
    }
    return service
  })
  .factory('Style', function($window) {
    var sheet = (function() {
      var style = document.createElement('style')

      // Add a media (and/or media query) here if you'd like!
      // style.setAttribute("media", "screen")
      // style.setAttribute("media", "@media only screen and (max-width : 1024px)")

      // WebKit hack :(
      style.appendChild(document.createTextNode(''))

      document.head.appendChild(style)

      return style.sheet
    })()

    return function (selector, rules, index) {
      if (sheet.insertRule) {
        sheet.insertRule(selector + "{" + rules + "}", index);
      } else {
        sheet.addRule(selector, rules, index);
      }
    }
  })


/* Controllers */

angular.module('well.controllers', [])
  .controller('AppCtrl', function ($scope, $firebase, $firebaseSimpleLogin, $location) {
    $scope.splash = {
      url: 'welcome.html'
    }

    var ref = new Firebase('https://well.firebaseio.com/')
    $scope.auth = $firebaseSimpleLogin(ref)

    $scope.login = {
      submit: function() {
        console.log(this.email)
        $scope.auth.$login('password', {
          email: this.email,
          password: this.password,
          rememberMe: true
        }).then(function(user) {
          console.log(user)
          console.log('Logged in as: ', user.uid);
          $location.path('/survey')
        }, function(error) {
          console.error('Login failed: ', error);
        })
      }
    }

    $scope.signup = {
      submit: function() {
        console.log(this.email)
        $scope.auth.$createUser(this.email, this.password)
        .then(function(user) {
          console.log('Logged in as: ', user.uid);
          $location.path('/survey')
        }, function(error) {
          console.error('Login failed: ', error);
        })
      }
    }
  })
  .controller('SurveyCtrl', function ($scope, Aspects, Survey, Style, $location) {
    $scope.aspects = Aspects.names()

    $scope.check = function () {
      alert(JSON.stringify(Survey.responses()))
    }

    $scope.loadTradeOff = function () {
      if (Survey.responded()) {
        $location.path('tradeoff')
      } else {
        Style('.unfilled', 'border: 1px solid rgb(255,200,200)')
      }
    }
  })
  .controller('TradeOffCtrl', function ($scope, Aspects, TradeOff) {
    $scope.aspects = Aspects.names()
    $scope.responses = TradeOff.responses()
    var choice = TradeOff.loadChoice()
    $scope.left = choice[0]
    $scope.right = choice[1]

    $scope.choose = function (p) {
      choice = TradeOff.choose(p)
      $scope.left = choice[0]
      $scope.right = choice[1]
    }
  })
  .controller('DataCtrl', function ($scope, $http) {
    $http.get('data/results').success(function (data) {
      console.log(data)
      $scope.data = data
    })
  })

/* Filters */

angular.module('well.filters', []).
  filter('interpolate', function (version) {
    return function (text) {
      return String(text).replace(/\%VERSION\%/mg, version);
    };
  });

/* Directives */

angular.module('well.directives', [])
  .directive('slider', function($interpolate, $window, $timeout, Survey, TradeOff) {
    return {
      restrict: 'EA',
      template: '<span class="pull-right">{{ level + diff }}</span><h4>{{ name }}</h4><div class="svg" ng-class="{ unfilled: !level }"></div>',
      link: function(scope, element, attrs) {
        attrs.$observe('name', function (name) {
          scope.name = name
          scope.level = Survey.responses()[name].level
        })

        attrs.$observe('diff', function (diff) {
          if (diff) {
            scope.diff = Number(diff)
          }
          scope.render()
        })

        var svg = d3.select(element[0].children[2])
          .append('svg')
          .style('width', '100%')
          .style('padding','20px')

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 20, bottom: 0, left: 10},
              width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              height = 20

          var x = d3.scale.linear()
              .domain([1, 100])
              .range([1, width])
              .clamp(true)

          var brush = d3.svg.brush()
              .x(x)
              .extent([scope.level, scope.level])
              .on('brush', brushed)

          svg
              .attr('width', width)
              .attr('height', height)
            .append('g')
              .attr('transform', 'translate(' + 50 + ',0)')

          svg.append('g')
              .attr('class', 'x axis')
              .attr('transform', 'translate(0,' + height / 2 + ')')
              .call(d3.svg.axis()
                .scale(x)
                .orient('bottom')
                .tickSize(0)
                .tickPadding(12))
            .select('.domain')
            .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
              .attr('class', 'halo')

          var rect = svg.append('rect')
              .attr('y', height / 2 - 4)
              .attr('height', 8)
              .attr('width', 0)

          var text = svg.append('text')

          var slider = svg.append('g')
              .attr('class', 'slider')
              .call(brush)

          slider.selectAll('.extent,.resize')
              .remove()

          slider.select('.background')
              .attr('height', height)

          var handle = slider.append('circle')
            .attr('class', 'handle')
            .attr('transform', 'translate(0,' + height / 2 + ')')
            .attr('r', 9)

          slider
              .call(brush.event)
            .transition() // gratuitous intro!
              .duration(250)
              .call(brush.extent([scope.level, scope.level]))
              .call(brush.event)


          function brushed() {
            var value = brush.extent()[0]

            if (d3.event.sourceEvent) { // not a programmatic event
              var v = x.invert(d3.mouse(this)[0])
              value = isNaN(v) ? value : v
              brush.extent([value, value])
            }

            value = Math.round(value)

            if (!isNaN(scope.diff) && scope.diff !== 0) {
              handle
                  .attr('cx', x(value))
                .transition()
                  .duration(250)
                  .attr('cx', x(value) + x(scope.diff))

              d3.select(element[0].children[2]).style('background-color', d3.hsl(value + scope.diff, .8, .8))
            } else if (value > 2) {
              handle.attr('cx', x(value))

              $timeout(function () {
                scope.level = value
                Survey.respond(scope.name, scope.level)
              })

              d3.select(element[0].children[2]).style('background-color', d3.hsl(value, .8, .8))
            }
            if (scope.diff > 0) {
              rect
                  .attr('class', 'plus')
                  .attr('x', x(value))
                .transition()
                  .duration(250)
                  .attr('width', x(scope.diff))

              text
                  .attr('x', x(value))
                .transition()
                  .duration(250)
                  .text('+' + scope.diff)
                  .attr('x', x(value) + x(scope.diff))
            } else if (scope.diff < 0) {
              rect
                .attr('class', 'minus')
                .attr('x', x(value))
                .attr('width', x(-scope.diff))
            }

          }
        }
      }
    }
  })
  .directive('earth', function () {
    return {
      restrict: 'A',
      link: function (scope, element, attrs) {
        var splash = d3.select('.splash')

        var width = splash.style('width').replace('px',''),
            height = splash.style('height').replace('px','');

        var velocity = 0.03,
            t0 = Date.now();

        var projection = d3.geo.equirectangular()
            .scale(400)
            .translate([width / 2, height / 2]);

        console.log(width, height)
        var canvas = d3.select('.earth').append("canvas")
            .attr("width", width)
            .attr("height", height);

        var context = canvas.node().getContext("2d");

        var path = d3.geo.path()
            .projection(projection)
            .context(context);

        d3.json("world-110m.json", function(error, world) {
          var land = topojson.feature(world, world.objects.land);
          var countries = topojson.feature(world, world.objects.countries).features
          console.log(countries)

          for (var i in countries) {
            countries[i].properties.color = Math.random() * 100
          }

          console.log(land)
          console.log(countries)

          d3.timer(function() {
            var t = Date.now() - t0;
            projection.rotate([0, velocity * t]);
            context.clearRect(0, 0, width, height);
            // context.beginPath();
            // context.strokeStyle = '#766951'
            // path(land);
            // context.stroke()

            for (var i in countries) {
              context.beginPath()
              context.fillStyle = d3.hsl(++countries[i].properties.color, .8, .8).toString()
              path(countries[i])
              context.fill()
            }
          });
        });
      }
    }
  })
