angular.module('well', [
  'ngRoute',
  'well.controllers',
  'well.filters',
  'well.services',
  'well.directives',
  'well.survey',
  'well.tradeoff',
  'well.overlap',
  'well.results'
])
.config(function ($routeProvider, $locationProvider) {
  $routeProvider
    .when('/', {
      templateUrl: 'landing.html'
    })
    .when('/login', {
      templateUrl: 'login.html',
      controller: 'LoginCtrl'
    })
    .when('/signup', {
      templateUrl: 'signup.html'
    })
    .when('/consent', {
      templateUrl: 'consent.html'
    })
    .when('/terms', {
      templateUrl: 'terms.html'
    })
    .when('/privacy', {
      templateUrl: 'privacy.html'
    })
    .when('/survey', {
      templateUrl: 'survey.html',
      controller: 'SurveyCtrl'
    })
    .when('/three', {
      templateUrl: 'tradeoff.html',
      controller: 'ThreeCtrl'
    })
    .when('/two', {
      templateUrl: 'tradeoff.html',
      controller: 'TwoCtrl'
    })
    .when('/complete', {
      templateUrl: 'complete.html',
      controller: 'CompleteCtrl'
    })
    .when('/overlap', {
      templateUrl: 'overlap.html',
      controller: 'OverlapCtrl'
    })
    .when('/overlapped', {
      templateUrl: 'overlapped.html'
    })
    .when('/results', {
      templateUrl: 'results.html',
      controller: 'ResultsCtrl'
    })
    .when('/chart', {
      templateUrl: 'chart.html',
      controller: 'ChartCtrl'
    })
    .when('/dummy', {
      templateUrl: 'dummy.html',
      controller: 'DummyCtrl'
    })
    .otherwise({
      redirectTo: '/'
    })

  // $locationProvider.html5Mode(true)
})

/* Controllers */

angular.module('well.controllers', [])
  .controller('AppCtrl', function ($scope, $rootScope, User, $location, Aspects, Survey) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts(),
      color: Aspects.getColor
    }

    $scope.responses = Survey.responses()

    $scope.splash = {
      url: 'welcome.html'
    }

    $scope.user = User

    $scope.settings = {
      devmode: false,
      overlap: null 
    }

    $scope.$watch('settings.overlap', function (overlap) {
      if (overlap === 'on') {
        $location.search('overlap')
      } else if (overlap === 'off') {
        $location.search('')
      }
    })

    $rootScope.$on('$locationChangeSuccess', function () {
      if ($location.search().overlap) {
        $scope.settings.overlap = 'on'
      } else {
        $scope.settings.overlap = 'off'
      }
    })
  })
  .controller('LoginCtrl', function ($scope, User, $location) {
    $scope.login = {
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password'
      },
      submit: function() {
        if (!$scope.login.email) {
          $scope.login.wrong = 'INVALID_EMAIL'
          $scope.login.placeholder.email = 'Enter a valid email'
        } else if (!$scope.login.password) {
          $scope.login.wrong = 'INVALID_PASSWORD'
          $scope.login.placeholder.email = 'Enter a valid password'
        } else {
          User.login(this.email, this.password).then(function(user) {
            $scope.login.wrong = 'in'
            console.log('Logged in as: ', user.uid)
            $location.path('survey')
          }, function(error) {
            $scope.login.wrong = error.code
            if (error.code === 'INVALID_EMAIL') {
              $scope.login.email = ''
              $scope.login.placeholder.email = 'Enter a valid email'
            } else if (error.code === 'INVALID_PASSWORD') {
              $scope.login.password = ''
              $scope.login.placeholder.password = 'Enter a valid password'
            }
            console.error('Login failed: ', error)
          })
        }
      }
    }
  })
  .controller('DummyCtrl', function ($scope) {
    var aspects = ['Following your passion', 'Being acknowledged for your work', 'Being treated fairly', 'Having meaningful relationships', 'Having a sense of purpose']
    $scope.pairs = _.map(aspects, function (a, i) {
      return [a, aspects[(i + 1) % 5]]
    })
    $scope.levels = {}
    _.each(aspects, function (a) {
      $scope.levels[a] = Math.round( ( Math.random() * 35 ) + 60)
    })
    $scope.selections = {}
    console.log($scope.pairs, $scope.levels)
  })
/* Directives */

angular.module('well.directives', [])
  .directive('earth', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {},
      link: function (scope, element, attrs) {
        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        var splash = d3.select('.splash')

        scope.render = function () {
          splash.selectAll('.earth *').remove()

          var width = window.innerWidth,
              height = window.innerHeight

          var projection = d3.geo.orthographic()
              .precision(0)
              .scale(500)
              .translate([width / 2, height / 2])
              .clipAngle(180)

          var canvas = d3.select('.splash .earth').append('canvas')
              .attr('width', width)
              .attr('height', height)

          var context = canvas.node().getContext('2d')

          var path = d3.geo.path()
              .projection(projection)
              .context(context)

          var delta = 0
          var offset = 0
          var ln = d3.random.logNormal(1)
          _.each(scope.responses, function (resp) {
            resp.rand = Math.random() * 20 + 10
          })

          d3.json('world-110m.json', function(error, world) {
            var x, y = 0
            window.onscroll = function () {
              y = (window.pageYOffset || document.scrollTop)  - (document.clientTop || 0) || 0
              rotate()
            }

            d3.select('body').on('mousemove', function () {
              x = d3.mouse(this)[0]
              rotate()
            })

            var land = topojson.feature(world, world.objects.land)
            var countries = topojson.feature(world, world.objects.countries).features

            _.each(countries, function (country) {
              country.properties.color = Math.random()
            })
            rotate()

            function rotate () {
              projection.rotate([x * .1, y * .1, 30])
              context.clearRect(0, 0, width, height)

              _.each(countries, function (country) {
                context.beginPath()
                context.strokeStyle = d3.hsl(country.properties.color * x, 1, .8).toString()
                path(country)
                context.stroke()
              })

              if (y > window.innerHeight - 80) {
                d3.select('.foot')
                  .style({
                    'position': 'fixed',
                    'top': '0',
                    'margin-top': '0'
                  })
              } else {
                d3.select('.foot')
                  .style({
                    'position': 'absolute',
                    'top': '100%',
                    'margin-top': '-80px'
                  })
              }
            }
          })
        }
      }
    }
  })
  .directive('plot', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        data: '=',
        weighted: '&'
      },
      link: function (scope, element, attrs) {
        var svg = d3.select(element[0]).append('svg')
            .style('width', '100%')
            .style('height', '500px')
            .style('padding', '20px')
          .append('g')


        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          if (scope.data) scope.render(data)
        })

        scope.$watch('data', function (data) {
          var d = scope.data
          if (d) scope.render(d)
        }, true)

        var percent = d3.format('%')

        var single = function () {
          data.push(JSON.parse(JSON.stringify(data[0])))
          data[0].date = 0
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 40,
              height = 500

          var x = d3.time.scale()
              .domain([data[0].date, data[data.length - 1].date])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - 40, 0]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0); })
              .y1(function (d) { return y(d.y0 + d.y); });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]}
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight  });
            });
          });

          stack(seriesArr);

          y.domain([0, d3.max(seriesArr, function (c) { 
              return d3.max(c.values, function (d) { return d.y0 + d.y; });
            })]);

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("d", function (d) { return area(d.values); })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99); })
            // .style('fill-opacity', '0.3')
            .style("stroke", '#fff');

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dy', -16)
            .attr('dx', -10)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.append('text')
            .text(function () {
              var sum = 0
              for (var i in varNames) {
                sum += data[0][varNames[i]].value * data[0][varNames[i]].weight
              }
              return Math.round(sum)
            })
            .attr('text-anchor', 'start')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dx', 10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.selectAll('.label')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })

           svg.selectAll('.weight')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
              .attr('dy', '1em')

          svg.selectAll('.value')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.values[0].value })
              .attr('class', 'value')
              .attr('text-anchor', 'start')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', 10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
        }

        var multi = function () {
          var duration = data[data.length - 1].date - data[0].date
          data.unshift(JSON.parse(JSON.stringify(data[0])))
          data.push(JSON.parse(JSON.stringify(data[data.length - 1])))
          data[0].date = data[0].date - duration * 0.03
          data[data.length - 1].date = data[data.length - 1].date + duration * 0.03
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 60,
              height = 500

          var dates = data.map(function (d) {
            return d.date
          })

          var x = d3.time.scale()
              .domain([dates[0], dates[data.length - 1]])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - ((varNames.length ) * (varNames.length - 1) * 2.5), 20]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values; })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .interpolate('monotone')
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0) + varNames.indexOf(d.name) * 2 })
              .y1(function (d) { return y(d.y0 + d.y) + varNames.indexOf(d.name) * 2 });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]};
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight, name: name });
            });
          });

          stack(seriesArr)

          maxY = d3.max(seriesArr, function (c) { 
            return d3.max(c.values, function (d) { return d.y0 + d.y; });
          })
          y.domain([0, maxY]);

          var back = svg.selectAll()
            .data(seriesArr)
            .enter().append('g')

          back.append("path")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99) })
            .style("stroke", '#fff')

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '1em')

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("class", "streamPath")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return -100 })
          //   .attr('y', function (d) { return y(d.values[0].y0 + d.values[0].y) + varNames.indexOf(d.name) * 2 })
          //   .attr('height', function (d) { return y(d.values[0].y0) - y(d.values[0].y0 + d.values[0].y) })
          //   .attr('width', function (d) { return x(d.values[0].label) + 100 })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return x(d.values[d.values.length - 1].label) })
          //   .attr('y', function (d) { return y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) + varNames.indexOf(d.name) * 2  })
          //   .attr('width', 40)
          //   .attr('height', function (d) { return y(d.values[d.values.length - 1].y0) - y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          selection.append('text')
            .text(function (d) { return d.name })
            .style('font-weight', 'bold')
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
            .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          selection.append('text')
            .text(function (d) { return percent(d.values[0].weight) })
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2 })
            .attr('dy', '1em')

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', function (d) { return y(seriesArr[0].values[0].y0 + seriesArr[0].values[0].y ) })
            .attr('dx', -10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          var values = selection.append('g')

          data.pop()
          data.shift()

          values.selectAll('text').
            data(function (d) {
              d.values.pop()
              d.values.shift()
              return d.values
            })
            .enter().append('text')
              .attr('class', function (d) {
                return 'value d' + d.label
              })
              .text(function (d) { return d.value })
              .style('font-weight', 'bold')
              .attr('x', function (d) { return x(d.label) })
              .attr('y', function (d) { return y(d.y0 + (d.y / 2)) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '7')
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.label === dates[0]) return 'end'
              //   else if (d.label === dates[dates.length - 1]) return 'start'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.label === dates[0]) return -5
              //   else if (d.label === dates[dates.length - 1]) return 5
              //   else return 0             
              // })
              .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          var sums = svg.selectAll()
              .data(data)
            .enter().append('g').attr('class', function (d) {
              return 'day d' + d.date
            })

          sums.append('rect')
              .attr('class', function (d) { return 'd' + d.date })
              .attr('x', function (d) { return x(d.date) - 20})
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum) - 40
              })
              .attr('width', 40)
              .attr('height', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return height - y(sum)
              })

          sums.append('text')
              .text(function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return Math.round(sum)
              })
              .attr('x', function (d) { return x(d.date) })
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum)
              })
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.date === dates[0]) return 'start'
              //   else if (d.date === dates[dates.length - 1]) return 'end'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.date === dates[0]) return 10
              //   else if (d.date === dates[dates.length - 1]) return -10
              //   else return 0             
              // })
              .attr('dy', '-1.25em')
              .style('font-weight', 'bold')
              .style('text-decoration', 'underline')

          dates.pop()
          dates.shift()

          dates.forEach(function (date) {
            var day = d3.selectAll('.d' + date)
            day.on('mouseover', function () {
              day.classed('highlight', true)
            })
            day.on('mouseout', function () {
              day.classed('highlight', false)
            })
          })

          var xAxis = d3.svg.axis()
            .scale(x)
            .tickValues(dates.map(function (d) {
              return new Date(d)
            }))
            .tickFormat(d3.time.format('%b %d'))
            .orient("bottom")

          var axis = svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + (height - 40) + ")")
              .call(xAxis)
        }

        var labelVar = 'date'
        var data, varNames
        scope.render = function () {
          data = angular.copy(scope.data)
          varNames = d3.keys(data[0])
            .filter(function (key) { return key !== labelVar;})
          if (data.length > 1) {
            multi()
          } else {
            single()
          }
        }
      }
    }
  })
  .directive('range', function($window, $timeout, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        level: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 22)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        var lastLevel = null
        scope.$watch('level', function (level) {
          if (level !== lastLevel) {
            scope.render()
          }
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
              height = 22

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])
              .clamp(true)

          var brush = d3.svg.brush()
              .x(x)
              .extent([scope.level, scope.level])
              .on('brush', brushed)

          var axis = svg.append('g')
              .attr('class', 'axis')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickValues([]))
          
          var domain = axis.select('.domain')
              .attr('transform', 'translate(0, 10)')

          domain.select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
              .attr('class', 'halo')

          var slider = svg.append('g')
              .attr('class', 'slider')
              .call(brush)

          slider.selectAll('.extent,.resize')
              .remove()

          slider.select('.background')
              .attr('height', height)

          var pointy = function () {
            var cx = x(1),
              cy = 10
            return {
              set: function (pt) {
                cx = pt
                return [
                  { x: cx - 6, y: cy - 6 },
                  { x: cx + 6, y: cy - 6 },
                  { x: cx + 6, y: cy + 6 },
                  { x: cx, y: cy + 10 },
                  { x: cx - 6, y: cy + 6 }
                ]
              }

            }
          }

          var line = d3.svg.line()
            .x(function (d) { return d.x })
            .y(function (d) { return d.y })

          var handle = slider.append('path')
              .attr('class', 'handle')
              .attr('d', line(pointy().set(x(scope.level))) + 'Z')
              .style('display', 'none')

          // slider
          //     .call(brush.event)

          function brushed() {
            var value = brush.extent()[0]

            var v = x.invert(d3.mouse(this)[0])
            value = isNaN(v) ? value : v
            brush.extent([value, value])

            if (value) value = Math.round(value)

            handle
              .style('display', 'block')
              .attr('d', line( pointy().set( x(value) ) ) + 'Z')
            
            lastLevel = value
            $timeout(function () {
              scope.level = value
            })
          }
        }
      }
    }
  })
  .directive('bar', function($window, Aspects, $filter) {
    return {
      restrict: 'E',
      scope: {
        level: '=',
        diff: '=',
        name: '=',
        choice: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 40)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch('level', function () {
          scope.render()
        })

        scope.$watch('diff', function (diff) {
          scope.render()
        })

        scope.$watch('name', function () {
          scope.render()
        })

        scope.$watch('choice', function () {
          scope.render()
        }, true)

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var w = d3.select(element[0])[0][0].offsetWidth,
            width = w > 0 ? w : 100
            height = 40

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])

          var axis = svg.append('g')
              .attr('class', 'axis')
              .attr('transform', 'translate(0,' + (height - 20) + ')')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickPadding(12))

          axis.select('.domain').remove()

          var barBack = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(100) - x(0))
              .style('fill', Aspects.getColor(scope.name, -1))

          var bar = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(scope.level) - x(0))
              .style('fill', Aspects.getColor(scope.name, 100))

          var diff = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 205))

          var text = svg.append('text')
              .attr('y', 14)
              .attr('dy', '.375em')
              .style('fill', '#000')
              .style('font-weight', '400')

          if (scope.diff > 0) {
            var d = x(scope.diff) - x(0)
            diff
                .attr('x', x(scope.level))
                .attr('width', d)

            text.text('+' + $filter('round1')(scope.diff))
            var w = text.style('width').replace('px','')

            if (x(100) - x(scope.level) - x(scope.diff) > w) {
              text
                .attr('x', x(scope.level) + x(scope.diff))
                .attr('dx',  4)
            } else {
              text
                .attr('x', x(100) - w) 
                .attr('dx',  -4)
            }
          } else if (scope.diff < 0) {
            var d = x(-scope.diff) - x(0)
            diff
                .attr('x', x(scope.level) - d)
                .attr('width', d)
                .style('fill', Aspects.getColor(scope.name, 40))

            text.text($filter('round1')(scope.diff))

            text
              .attr('x', x(scope.level) + x(scope.diff))
              .attr('dx',  4)
          }
        }
      }
    }
  })
  .directive('fix', function ($window) {
    return {
      restrict: 'EA',
      scope: {},
      link: function(scope, element, attrs) {
        var div = d3.select(element[0])
        var parent = d3.select(div[0][0].parentNode)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          var bounds = parent[0][0].getBoundingClientRect()
          console.log(bounds, window.scrollLeft)
          div.style({
            'position': 'fixed',
            'padding': parent.style('padding'),
            'top': window.scrollTop ? bounds.top + window.scrollTop + 'px' : bounds.top + 'px',
            'left': window.scrollLeft ? bounds.left + window.scrollLeft +  'px' : bounds.left + 'px',
            'width': bounds.width + 'px'
          })
        }
      }
    }
  })
  .directive('prog', function ($window) {
    return {
      restrict: 'EA',
      scope: {
        complete: '='
      },
      link: function(scope, element, attrs) {
         var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 8)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('complete', function () {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()
          var bounds = svg[0][0].getBoundingClientRect()
          svg.append('rect')
            .attr('height', 4)
            .attr('width', bounds.width * scope.complete)
            .attr('fill', '#559')
        }
      }
    }
  })


/* Filters */

angular.module('well.filters', [])
  .filter('round2', function () {
    return function (n) {
      return Number(n).toFixed(2)
    }
  })
  .filter('round1', function () {
    return function (n) {
      return n % 1 === 0 ? n : Number(n).toFixed(1)
    }
  })
  .filter('percent', function () {
    return function (n) {
      return d3.format('%')(n)
    }
  })
  .filter('capitalize', function () {
    return function (string) {
      return string ? string.charAt(0).toUpperCase() + string.slice(1) : ''
    }
  })

/* Services */

angular.module('well.services', [])
  .factory('User', function ($q, $rootScope, $location) {
    var user = {}

    user.firebase = new Firebase('https://well.firebaseio.com/')

    user.firebase.authAnonymously(function (error, authData) {
      if (error) {
        console.log('Error authenticating:', error)
      } else {
        // User authenticated with Firebase
        console.log('Logged in anonymously as ' + authData.uid)
        user.authData = authData
      }
    })

    user.hashedEmail = function (email) {
      return 'wiaglif+' + CryptoJS.SHA3(email, { outputLength: 224 }).toString() + '@gmail.com'
    }

    user.signup = function (email, password) {
      var deferred = $q.defer()

      this.email = email
      this.firebase.createUser({
        email    : email, // user.hashedEmail(email)
        password : password
      }, function (error) {
        if (error === null) {
          console.log('User created successfully')
          deferred.resolve()
        } else {
          console.log('Error creating user:', error)
          deferred.reject(error)
        }
      })

      return deferred.promise
    }

    user.login = function (email, password) {
      var deferred = $q.defer()

      this.email = email
      this.firebase.authWithPassword({
        email    : email, // user.hashedEmail(email)
        password : password
      }, function (error, authData) {
        if (error === null) {
          // user authenticated with Firebase
          user.authData = authData
          console.log('User ID: ' + authData.uid + ', Provider: ' + authData.provider)
          deferred.resolve(authData)
        } else {
          console.log('Error authenticating user:', error)
          deferred.reject(error)
        }
      })

      return deferred.promise
    }

    user.addData = function (module, data) {
      if (this.authData) {
        this[module] = new Firebase('https://well.firebaseio.com/module/' + module + '/' + this.authData.uid)
        this[module].push(data)
      } else {
        console.log('Error, firebase not authenticated')
      }
    }

    user.getData = function (module, limit) {
      if (this.authData) {
        this[module] = new Firebase('https://well.firebaseio.com/module/' + module + '/' + this.authData.uid)
        return limit ? this[module].limit(limit) : this[module].limit(1)
      } else {
        return null
      }
    }

    $rootScope.$on('login', function(e, user) {
      console.log('User ' + user.id + ' successfully logged in!')
      console.log(user)
    })

    return user
  })
  .factory('Aspects', function () {
    var aspects = {
      'Family Well-Being': 'the overall well-being of you and your family',
      'Family Happiness': 'your and your family’s happiness',
      'Health': 'your health (physical and mental)',
      'Morality': 'your morality (that is, living up to your personal values)',
      'Family Relationships': 'your family relationships',
      'Financial Security': 'your financial security',
      'Options & Possibilities': 'your options and possibilities in life',
      'Meaning & Value': 'your sense that your life is meaningful and has value',
      'Life Satisfaction': 'how satisfied you are with your life',
      'Enough Time & Money': 'your feeling that you have enough time and money',
      'Peace, Calm & Harmony': 'how peaceful, calm, and harmonious your life is',
      'Independence': 'your feeling of independence and self-sufficiency',
      'Making a Difference': 'your sense that you are making a difference in the world',
      'Worthwileness': 'your feeling that the things you do are worthwhile',
      'Safety & Security': 'your physical safety and security',
      'Respect': 'your being treated with dignity and respect by others',
      'Amount of Day Happy': 'how much of the time you feel happy',
      'Improvement': 'your sense that things are getting better and better',
      'Overall Happiness': 'how happy you are overall with your life',
      'Life Longevity': 'your chance to live a long life'
    }

    var five = _.sample(Object.keys(aspects), 5)

    return {
      names: function () {
        return five
      },
      texts: function () {
        return aspects
      },
      getColor: function (aspect, level) {
        var h = (five.indexOf(aspect) + 6) * 70,
            l =  .99 + (level / 100) * -.24
        return d3.hsl(h, .8, l).toString()
      }
    }
  })
  .factory('Style', function ($window) {
    var sheet = (function() {
      var style = document.createElement('style')

      // Add a media (and/or media query) here if you'd like!
      // style.setAttribute("media", "screen")
      // style.setAttribute("media", "@media only screen and (max-width : 1024px)")

      // WebKit hack :(
      style.appendChild(document.createTextNode(''))

      document.head.appendChild(style)

      return style.sheet
    })()

    return function (selector, rules, index) {
      if (sheet.insertRule) {
        sheet.insertRule(selector + "{" + rules + "}", index);
      } else {
        sheet.addRule(selector, rules, index);
      }
    }
  })
  .factory('Slide', function () {
    return function (element, duration) {
      var neu = d3.select(element).style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')

      var parent = neu.select(function () { return this.parentNode })

      parent.style('pointer-events', 'none')

      old
        .transition()
          .duration(duration)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
            parent.style('pointer-events', 'auto')
          })

      neu
        .transition()
          .duration(duration)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }
  })
angular.module('well.survey', [])
  .controller('ResultsCtrl', function ($scope, Aspects, Survey, Choices, User) {
    $scope.weights = Choices.weights()
    $scope.aspects.sorted = _.sortBy($scope.aspects.names, function (n) {
      return $scope.weights[n] * -1
    })

    $scope.data = User.getData('threetwo')
    
    // generate some dummy data for testing
    if (!$scope.weights) {
      $scope.weights = {}
      _.each($scope.aspects.names, function (a) {
        $scope.weights[a] = Math.random()
      })
      console.log($scope.weights)

      var sumW = 0
       _.each($scope.aspects.names, function (a) {
        sumW += $scope.weights[a]
      })

      _.each($scope.aspects.names, function (a) {
        $scope.weights[a] = $scope.weights[a] / sumW
      })
    }
  })
  .controller('SurveyCtrl', function ($scope, Aspects, Survey, Style, $location, $routeParams) {
    Survey.reset()

    $scope.survey = {
      finished: false
    }

    $scope.$watch('responses', function () {
      if (Survey.responded()) {
        $scope.survey.finished = true
      }
    }, true)

    $scope.next = function () {
      $location.path('three')
    }
  })
  .factory('Survey', function (Aspects) {
    var aspects = Aspects.names(),
      responses = {}

    _.each(aspects, function (a) {
      responses[a] = {}
      responses[a].level = null
    })

    return {
      responses: function () {
        return responses
      },
      respond: function (aspect, level) {
        responses[aspect].level = level
      },
      responded: function () {
        return aspects.every(function (a) {
          return responses[a].level
        })
      },
      randomize: function () {
        console.log('randomized')
        for (var i in aspects) {
          responses[aspects[i]].level = Math.max( Math.ceil(Math.random() * 99), Math.max( Math.ceil(Math.random() * 99), Math.ceil(Math.random() * 99) ) )
        }
        return responses
      },
      reset: function () {
        _.each(aspects, function (a) {
          responses[a] = {}
          responses[a].level = null
        })
        return responses
      }
    }
  })
angular.module('well.tradeoff', [])
  //
  // --------------------------------------------------
  //
  //                  CONTROLLERS
  //
  // --------------------------------------------------
  //
  .controller('ThreeCtrl', function ($scope, Choices, Three, Two, Slide, $location, $routeParams) {
    $scope.choice = Three.choice()
    $scope.choices = Choices

    $scope.choose = function (i) {
      $scope.choice = Three.choice(i)
      Slide('.options', 300)
    }

    // the last choice returns false
    $scope.$watch('choice', function (c) {
      $scope.choices = Choices
      var total = $scope.settings.overlap === 'on' ? Three.numberOfQs + 3 : Three.numberOfQs + Two.numberOfQs
      $scope.completed = Choices.step++ / total
      if (!c) {
        if ($scope.settings.overlap === 'on') {
          $location.path('overlap')
        } else {
          $location.path('two')
        }
      }
    })
  })
  .controller('TwoCtrl', function ($scope, Choices, Two, Three, Slide, User, $location) {
    $scope.choice = Two.choice()
    $scope.choices = Choices

    $scope.choose = function (i) {
      $scope.choice = Two.choice(i)
      Slide('.options', 300)
    }

    // the last choice returns false
    $scope.$watch('choice', function (c) {
      $scope.choices = Choices
      var total = Three.numberOfQs + Two.numberOfQs
      $scope.completed = Choices.step++ / total
      if (!c) {
        if (User.authData.provider === 'password') {
          // user is authenticated with email and password
          Choices.submit()
          $location.path('results')
        } else {
          $location.path('complete')
        }
      }
    })
  })
  .controller('CompleteCtrl', function ($scope, User, Choices, $location) {
    $scope.login = {
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password'
      },
      submit: function() {
        if (!$scope.login.email) {
          $scope.login.wrong = 'INVALID_EMAIL'
          $scope.login.placeholder.email = 'Enter a valid email'
        } else if (!$scope.login.password) {
          $scope.login.wrong = 'INVALID_PASSWORD'
          $scope.login.placeholder.email = 'Enter a valid password'
        } else {
          User.login(this.email, this.password).then(function(user) {
            $scope.login.wrong = 'in'
            console.log('Logged in as: ', user.uid)
            Choices.submit()
            $location.path('results')
          }, function(error) {
            $scope.login.wrong = error.code
            if (error.code === 'INVALID_EMAIL') {
              $scope.login.email = ''
              $scope.login.placeholder.email = 'Enter a valid email'
            } else if (error.code === 'INVALID_PASSWORD') {
              $scope.login.password = ''
              $scope.login.placeholder.password = 'Enter a valid password'
            }
            console.error('Login failed: ', error)
          })
        }
      }
    }

    $scope.signup = {
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password',
        confirm: 'Confirm password'
      },
      submit: function() {
        if (!$scope.signup.email) {
          $scope.signup.wrong = 'INVALID_EMAIL'
          $scope.signup.placeholder.email = 'Enter a valid email'
        } else if (!$scope.signup.password) {
          $scope.signup.wrong = 'INVALID_PASSWORD'
          $scope.signup.placeholder.email = 'Enter a valid password'
        } else if ($scope.signup.password && $scope.signup.password && $scope.signup.password !== $scope.signup.confirm) {
          $scope.signup.wrong = 'mismatch'
          $scope.signup.confirm = ''
        } else {
          var promise = User.signup($scope.signup.email, $scope.signup.password)
            .then(function () {
              $location.path('terms')
            }, function (error) {
              console.log(error)
              $scope.signup.wrong = error.code
              if (error.code === 'INVALID_EMAIL') {
                $scope.signup.email = ''
                $scope.signup.placeholder.email = 'Enter a valid email'
              } else if (error.code === 'INVALID_PASSWORD') {
                $scope.signup.password = ''
                $scope.signup.placeholder.password = 'Enter a valid password'
              } else if (error.code === 'EMAIL_TAKEN') {
                $scope.signup.false = true
                alert('The specified email address is already in use.')
              }
              console.error('Sign up failed: ', error)
            })
        }
      },
      agree: function () {
        User.login($scope.signup.email, $scope.signup.password)
          .then(function(user) {
            $scope.login.wrong = 'in'
            console.log('Logged in as: ', user.uid)
            Choices.submit()
            $location.path('results')
          }, function (error) {
            console.log(error)
          })
      }
    }
  })
  //
  // --------------------------------------------------
  //
  //                  SERVICES
  //
  // --------------------------------------------------
  //
  .factory('Tradeoff', function () {
    var tradeoff = {}
    // randomly decide whether to display positive or negative tradeoffs
    tradeoff.sign = Math.random() > 0.5 ? 'positive' : 'negative'
    console.log(tradeoff.sign)
    // 2 * i + 1 || 2 * i + 2
    // Each tuple represents the change in Option 1 for aspect X and the change in Option 2 for aspect Y respectively 
    tradeoff.positive_tradeoffs = [         
                            [4,4],
              [1,4],                   [4,1],
        [1,8],       [2,4],      [4,2],      [8,1],
      // MRS based on final tradeoff where each number represents the MRS of Y in terms of X as a power of 2
      // <--- indicates relative pref for X   ---> indicates pref for Y
      -4,  -2.5,  -1.5,  -0.5, 0.5,  1.5,  2.5,  4
    ]

    // The negative tradeoffs have the reverse mapping as the positive ones
    tradeoff.negative_tradeoffs = [         
                          [-4,-4],
            [-4,-1],                 [-1,-4],
        [-8,-1],    [-4,-2],    [-2,-4],   [-1,-8],
      4,  2.5,  1.5,  0.5, -0.5,  -1.5,  -2.5,  -4
    ]

    // where a and b are the rating levels for aspects a and b
    tradeoff.checkCorners = function (a, b) {
      if (a > 92 && b < 8) {
        return 'skip'
      } else if (a < 8 && b > 92) {
        return 'skip'
      } else if (a > 92 || b > 92) {
        return 'negative'
      } else if (a < 8 || b < 8) {
        return 'positive'
      } else {
        return null
      }
    }

    // where a and b are the rating levels for aspects a and b
    tradeoff.values = function (a, b) {
      var s = this.checkCorners(a, b) === null ? this.sign : this.checkCorners(a, b)
      if (s === 'positive') {
        return this.positive_tradeoffs
      } else if (s === 'negative') {
        return this.negative_tradeoffs
      } else {
        return 'skip'
      }
    }
    return tradeoff
  })
  // The Choices service records decisions and generates MRS values / weights
  .factory('Choices', function (Aspects, Survey, Tradeoff, User) {
    var aspects = Aspects.names()
    var choices = {}
    choices.step = 0
    choices.levels = Survey.responses()
    choices.sign = Tradeoff.sign
    choices.skipped = []
    choices.decisions = []
    choices.MRS = {}
    _.each(aspects, function (aspect) {
      choices.MRS[aspect] = {}
    })

    // add MRS value where d is the denomitar aspect, n the numerator and v the value as a power of 2
    choices.addMRS = function (n, d, v) {
      this.MRS[d][n] = v
      this.MRS[n][d] = -v
    }

    // compute the MRS value of aspect n in terms of d, assuming one step of transitivity if necessary
    choices.getMRS = function (n, d) {
      if (d === n) {
        return 0
      } else if (this.MRS[d][n]) {
        return this.MRS[d][n]
      } else if (Object.keys(this.MRS[d]).length) {
        // check if there's an alternative route to n
        var alt = _.find(Object.keys(choices.MRS[d]), function (alt) {
          return choices.MRS[alt][n]
        })
        if (alt) {
          console.log(alt, choices.MRS[d])
          return choices.MRS[d][alt] + choices.MRS[alt][n]
        } else {
          return false
        }
      } else {
        return false
      }
    }

    // records each decision
    choices.record = function (pair, i) {
      this.decisions.push({
        aspects: pair,
        i: i,
        t: Date.now()
      })

      // if this is a final tradeoff
      if (i > 6) {
        // MRS of pair[1] in terms of pair[0]
        this.addMRS(pair[1], pair[0], Tradeoff.values(this.levels[pair[0]].level, this.levels[pair[1]].level)[i])
      }
    }

    choices.weights = function () {
      var sum = 0
      var ws = _.map(aspects, function (a) {
        var mrs = choices.getMRS(a, aspects[0])
        sum += Math.pow(2, mrs)
        return Math.pow(2, mrs)
      })

      var weights = {}
      _.each(aspects, function (aspect, i) {
        weights[aspect] = ws[i] / sum
      })
      return weights
    }

    choices.submit = function () {
      User.addData('threetwo', {
        aspects: aspects,
        responses: this.levels,
        decisions: this.decisions,
        skipped: this.skipped,
        MRS: this.MRS,
        weights: this.weights()
      })
    }

    return choices
  })
  .factory('Three', function (Aspects, Survey, Tradeoff, Choices) {
    var aspects = Aspects.names()
    var responses = Survey.responded() ? Survey.responses() : Survey.randomize()

    var three = {}
    three.aspects = _.sample(aspects, 3)

    three.pairs = _.map(three.aspects, function (aspect, i) {
      return [aspects[i], aspects[(i + 1) % 3]]
    })
    three.pairs = _.filter(three.pairs, function (pair) {
      var skip = Tradeoff.values(responses[pair[0]].level, responses[pair[1]].level) === 'skip'
      if (skip) Choices.skipped.push(pair)
      return !skip
    })

    three.numberOfQs = three.pairs.length * 3
    three.pair = {}

    three.choice = function (i) {
      if (!i) {
        i = 0
        this.pair = this.pairs.pop()
      } else {
        Choices.record(this.pair, i)
      }

      if (i > 6) {
        i = 0
        if (this.pairs.length) {
          this.pair = this.pairs.pop()
        } else {
          return false
        }
      }

      var tradeoff = Tradeoff.values(responses[this.pair[0]].level, responses[this.pair[1]].level)
      return {
        aspects: this.pair,
        tradeoff: tradeoff[i],
        i: i
      }
    }

    return three
  })
  .factory('Two', function (Aspects, Survey, Tradeoff, Choices, Three) {
    var aspects = Aspects.names()
    var responses = Survey.responded() ? Survey.responses() : Survey.randomize()

    var two = {}
    two.aspects = _.difference(aspects, Three.aspects)

    two.pairs = [ [aspects[3], aspects[1]], [aspects[4], aspects[2]] ] 
    two.pairs = _.filter(two.pairs, function (pair) {
      var skip = Tradeoff.values(responses[pair[0]].level, responses[pair[1]].level) === 'skip'
      if (skip) Choices.skipped.push(pair)
      return !skip
    })

    two.numberOfQs = (two.pairs.length + 2) * 3
    two.pair = {}

    two.choice = function (i) {
      if (!i) {
        i = 0
        this.pair = this.pairs.pop()
      } else {
        Choices.record(this.pair, i)
      }

      if (i > 6) {
        i = 0
        if (this.pairs.length) {
          this.pair = this.pairs.pop()
        } else {
          return false
        }
      }

      var tradeoff = Tradeoff.values(responses[this.pair[0]].level, responses[this.pair[1]].level)
      return {
        aspects: this.pair,
        tradeoff: tradeoff[i],
        i: i
      }
    }

    return two
  })
angular.module('well.overlap', [])
  .factory('Overlap', function (Three, Choices, Tradeoff, Survey) {
    var responses = Survey.responses()
    var overlap = {}
    overlap.aspects = Three.aspects
    overlap.MRS = {}
    _.each(overlap.aspects, function (a) {
      overlap.MRS[a] = {}
      _.each(overlap.aspects, function (b) {
        var mrs = Choices.getMRS(a, b)
        // for testing set MRS to 0, i.e. 2^0
        overlap.MRS[a][b] = mrs ? mrs : 0
      })
    })

    overlap.positiveOK = function (a, b, c) {
      return a < 93 && b < 93 && c < 93
    }

    overlap.negativeOK = function (a, b, c) {
      return a > 8 && b > 8 && c > 8
    }

    overlap.getSign = function (a, b, c) {
      var sign = Tradeoff.sign
      if (sign === 'positive') {
        if (this.positiveOK(a, b, c)) {
          return 'positive'
        } else if (this.negativeOK(a, b, c)) {
          return 'negative'
        } else {
          return false
        }
      } else if (sign === 'negative') {
        if (this.negativeOK(a, b, c)) {
          return 'negative'
        } else if (this.positiveOK(a, b, c)) {
          return 'positive'
        } else {
          return false
        }
      }
    }

    overlap.doubled = null
    overlap.choice = function (i) {
      var sign = this.getSign(responses[overlap.aspects[0]].level, responses[overlap.aspects[1]].level, responses[overlap.aspects[2]].level)
      console.log(i, responses[overlap.aspects[0]].level, responses[overlap.aspects[1]].level, responses[overlap.aspects[2]].level, sign)
      // check corner case and if tradeoff value > 8, i.e. [-8, -1] or [8, 1]
      if (!sign || i > 6 || sign === 'negative' && i === 3 && this.doubled || sign === 'positive' && i === 6 && this.doubled) {
        return false
      } else if (sign === 'positive') {
        return {
          aspects: this.aspects,
          tradeoff: Tradeoff.positive_tradeoffs[i],
          i: i
        }
      } else if (sign === 'negative') {
        return {
          aspects: this.aspects,
          tradeoff: Tradeoff.negative_tradeoffs[i],
          i: i
        }
      }
    }
    return overlap
  })
  .controller('OverlapCtrl', function ($scope, Overlap, $location, Slide, Two, Three, Choices) {
    $scope.doubled = Math.random() > 0.5
    Overlap.doubled = $scope.doubled
    $scope.preamble = true
    $scope.overlap = Overlap
    $scope.choice = Overlap.choice(0)
    $scope.choose = function (i) {
      $scope.choice = Overlap.choice(i)
      Slide('.options', 300)
    }

    $scope.$watch('choice', function (c) {
      $scope.choices = Choices
      var total = Three.numberOfQs + 3
      $scope.completed = Choices.step++ / total
      if (!c) {
        $location.path('overlapped')
      }
    })
  })
angular.module('well.results', [])
  .directive('sicilian', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        responses: '=',
        weights: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .attr('class', 'sicilian')
          .style('width', '100%')

        svg.style('height', svg.style('width'))

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('responses', function () {
          scope.render()
        }, true)

        scope.$watch('weights', function () {
          scope.render()
        }, true)

        var sort = null
        attrs.$observe('sort', function (s) {
          sort = s
        })

        var names = Aspects.names()
        //   weights = _.map(names, function (e, i) {
        //     return Math.random()
        //   }),
        //   sum = _.reduce(weights, function (a, b) {
        //     return a + b
        //   }),
        //   data = _.map(names, function (e, i) {
        //     return {
        //       name: e,
        //       weight: weights[i] / sum
        //     }
        //   })

        // data = _.sortBy(data, function (d) {
        //   return d.weight * -1
        // })


        scope.render = function () {
          var data = _.map(names, function (a) {
            return {
              name: a,
              weight: scope.weights[a]
            }
          })
          data = _.sortBy(data, function (d) {
            if (sort === 'level') {
              return scope.responses[d.name].level
            } else {
              return d.weight * -1
            }
          })

          svg.selectAll('*').remove()

          var width = svg.style('width').replace('px','')

          var g = svg.selectAll()
              .data(data)
            .enter().append('g')
              .style('height', function (d) {
                return d.weight * width
              })

          g.append('rect')
              .attr('y', function (d) {
                return _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('width', function (d) {
                return width
              })
              .attr('height', function (d) {
                return d.weight * width
              })
              .style('fill', function (d) {
                return Aspects.getColor(d.name, 30)
              })

          g.append('rect')
              .attr('y', function (d) {
                return _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('width', function (d) {
                return (scope.responses[d.name].level / 100) * width
              })
              .attr('height', function (d) {
                return d.weight * width
              })
              .style('fill', function (d) {
                return Aspects.getColor(d.name, 140)
              })

          g.append('text')
              .attr('class', 'weight')
              .attr('y', function (d) {
                return d.weight * width * 0.5 + _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('dy', '.5em')
              .text(function (d) {
                return d3.format('%')(d.weight)
              })
              
        }
      }
    }
  })
  .controller('ChartCtrl', function ($scope) {
    
  })