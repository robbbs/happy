angular.module('well', [
  'ngRoute',
  'firebase',
  'well.controllers',
  'well.filters',
  'well.services',
  'well.directives',
  'well.survey',
  'well.tradeoff',
  'well.test'
])
.config(function ($routeProvider, $locationProvider) {
  $routeProvider
    .when('/', {
      templateUrl: 'landing.html'
    })
    .when('/login', {
      templateUrl: 'login.html'
    })
    .when('/signup', {
      templateUrl: 'signup.html'
    })
    .when('/consent', {
      templateUrl: 'consent.html'
    })
    .when('/terms', {
      templateUrl: 'terms.html'
    })
    .when('/privacy', {
      templateUrl: 'privacy.html'
    })
    .when('/survey', {
      templateUrl: 'survey.html',
      controller: 'SurveyCtrl'
    })
    .when('/three', {
      templateUrl: 'tradeoff.html',
      controller: 'ThreeCtrl'
    })
    .when('/two', {
      templateUrl: 'tradeoff.html',
      controller: 'TwoCtrl'
    })
    .when('/tradeoff', {
      templateUrl: 'tradeoff.html',
      controller: 'TradeOffCtrl'
    })
    .when('/SP', {
      templateUrl: 'sp.html',
      controller: 'SPCtrl'
    })
    .when('/SP/mrt', {
      templateUrl: 'spmrt.html',
      controller: 'MRTCtrl'
    })
    .when('/cycle', {
      templateUrl: 'cycle.html',
      controller: 'CycleCtrl'
    })
    .when('/tricycle', {
      templateUrl: 'tricycle.html',
      controller: 'TricycleCtrl'
    })
    .when('/history', {
      templateUrl: 'history.html',
      controller: 'HistoryCtrl'
    })
    .when('/test/:num', {
      templateUrl: 'history.html',
      controller: 'TestCtrl'
    })
    .when('/mrt/:concavity', {
      templateUrl: 'mrt.html',
      controller: 'mrt'
    })
    .when('/pie', {
      templateUrl: 'pie.html'
    })
    .when('/full', {
      templateUrl: 'full.html',
      controller: 'FullCtrl'
    })
    .when('/mockup', {
      templateUrl: 'mockup.html',
      controller: 'MockCtrl'
    })
    .when('/sort', {
      templateUrl: 'sort.html',
      controller: 'SortCtrl'
    })
    .when('/rate', {
      templateUrl: 'rate.html',
      controller: 'RateCtrl'
    })
    .when('/testtrade', {
      templateUrl: 'testtrade.html',
      controller: 'TesttradeCtrl'
    })
    .when('/complete', {
      templateUrl: 'complete.html',
      controller: 'CompleteCtrl'
    })
    .otherwise({
      redirectTo: '/'
    })

  // $locationProvider.html5Mode(true)
})

/* Controllers */

angular.module('well.controllers', [])
  .controller('AppCtrl', function ($scope, User, $location, Aspects, Survey) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts(),
      color: Aspects.getColor
    }

    $scope.responses = Survey.responses()

    $scope.splash = {
      url: 'welcome.html'
    }

    $scope.user = User

    $scope.login = {
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password'
      },
      submit: function() {
        User.login(this.email, this.password).then(function(user) {
          $scope.login.wrong = 'in'
          console.log('Logged in as: ', user.uid)
          if (Survey.responded()) {
            $location.path('history')
          } else {
            $location.path('survey')
          }
        }, function(error) {
          $scope.login.wrong = error.code
          if (error.code === 'INVALID_EMAIL') {
            $scope.login.email = ''
            $scope.login.placeholder.email = 'Enter a valid email'
          } else if (error.code === 'INVALID_PASSWORD') {
            $scope.login.password = ''
            $scope.login.placeholder.password = 'Enter a valid password'
          }
          console.error('Login failed: ', error);
        })
      }
    }

    $scope.signup = {
      enabled: false,
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password',
        confirm: 'Confirm password'
      },
      init: function () {
        $scope.signup.enabled = true
        $scope.signup.email = $scope.login.email
        $scope.signup.password = $scope.login.password
        $scope.signup.submit()
      },
      submit: function() {
        if ($scope.signup.password === $scope.signup.confirm) {
          User.signup($scope.signup.email, $scope.signup.password)
          .then(function(user) {
            $location.path('terms')
        }, function(error) {
          }, function(error) {
            $scope.signup.wrong = error.code
            if (error.code === 'INVALID_EMAIL') {
              $scope.signup.email = ''
              $scope.signup.placeholder.email = 'Enter a valid email'
            } else if (error.code === 'INVALID_PASSWORD') {
              $scope.signup.password = ''
              $scope.signup.placeholder.password = 'Enter a valid password'
            } else if (error.code === 'EMAIL_TAKEN') {
              $scope.signup.false = true
              alert('The specified email address is already in use.')
            }
            console.error('Sign up failed: ', error);
          })
        } else {
          $scope.signup.wrong = 'mismatch'
          $scope.signup.confirm = ''
        }
      },
      agree: function () {
        User.login($scope.signup.email, $scope.signup.password)
          .then(function(user) {
            $scope.login.wrong = 'in'
            console.log('Logged in as: ', user.uid)
            $scope.login.show = 'signedup'
          }, function (error) {
            console.log(error)
          })
      }
    }

    $scope.settings = {
      devmode: false
    }
  })
/* Directives */

angular.module('well.directives', [])
  .directive('earth', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {},
      link: function (scope, element, attrs) {
        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        var splash = d3.select('.splash')

        scope.render = function () {
          splash.selectAll('.earth *').remove()

          var width = window.innerWidth,
              height = window.innerHeight

          var projection = d3.geo.orthographic()
              .precision(0)
              .scale(500)
              .translate([width / 2, height / 2])
              .clipAngle(180)

          var canvas = d3.select('.splash .earth').append('canvas')
              .attr('width', width)
              .attr('height', height)

          var context = canvas.node().getContext('2d')

          var path = d3.geo.path()
              .projection(projection)
              .context(context)

          var delta = 0
          var offset = 0
          var ln = d3.random.logNormal(1)
          _.each(scope.responses, function (resp) {
            resp.rand = Math.random() * 20 + 10
          })

          d3.json('world-110m.json', function(error, world) {
            var x, y = 0
            window.onscroll = function () {
              y = (window.pageYOffset || document.scrollTop)  - (document.clientTop || 0) || 0
              rotate()
            }

            d3.select('body').on('mousemove', function () {
              x = d3.mouse(this)[0]
              rotate()
            })

            var land = topojson.feature(world, world.objects.land)
            var countries = topojson.feature(world, world.objects.countries).features

            _.each(countries, function (country) {
              country.properties.color = Math.random()
            })
            rotate()

            function rotate () {
              projection.rotate([x * .1, y * .1, 30])
              context.clearRect(0, 0, width, height)

              _.each(countries, function (country) {
                context.beginPath()
                context.strokeStyle = d3.hsl(country.properties.color * x, 1, .8).toString()
                path(country)
                context.stroke()
              })

              if (y > window.innerHeight - 80) {
                d3.select('.foot')
                  .style({
                    'position': 'fixed',
                    'top': '0',
                    'margin-top': '0'
                  })
              } else {
                d3.select('.foot')
                  .style({
                    'position': 'absolute',
                    'top': '100%',
                    'margin-top': '-80px'
                  })
              }
            }
          })
        }
      }
    }
  })
  .directive('plot', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        data: '=',
        weighted: '&'
      },
      link: function (scope, element, attrs) {
        var svg = d3.select(element[0]).append('svg')
            .style('width', '100%')
            .style('height', '500px')
            .style('padding', '20px')
          .append('g')


        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          if (scope.data) scope.render(data)
        })

        scope.$watch('data', function (data) {
          var d = scope.data
          if (d) scope.render(d)
        }, true)

        var percent = d3.format('%')

        var single = function () {
          data.push(JSON.parse(JSON.stringify(data[0])))
          data[0].date = 0
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 40,
              height = 500

          var x = d3.time.scale()
              .domain([data[0].date, data[data.length - 1].date])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - 40, 0]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0); })
              .y1(function (d) { return y(d.y0 + d.y); });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]}
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight  });
            });
          });

          stack(seriesArr);

          y.domain([0, d3.max(seriesArr, function (c) { 
              return d3.max(c.values, function (d) { return d.y0 + d.y; });
            })]);

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("d", function (d) { return area(d.values); })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99); })
            // .style('fill-opacity', '0.3')
            .style("stroke", '#fff');

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dy', -16)
            .attr('dx', -10)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.append('text')
            .text(function () {
              var sum = 0
              for (var i in varNames) {
                sum += data[0][varNames[i]].value * data[0][varNames[i]].weight
              }
              return Math.round(sum)
            })
            .attr('text-anchor', 'start')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dx', 10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.selectAll('.label')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })

           svg.selectAll('.weight')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
              .attr('dy', '1em')

          svg.selectAll('.value')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.values[0].value })
              .attr('class', 'value')
              .attr('text-anchor', 'start')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', 10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
        }

        var multi = function () {
          var duration = data[data.length - 1].date - data[0].date
          data.unshift(JSON.parse(JSON.stringify(data[0])))
          data.push(JSON.parse(JSON.stringify(data[data.length - 1])))
          data[0].date = data[0].date - duration * 0.03
          data[data.length - 1].date = data[data.length - 1].date + duration * 0.03
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 60,
              height = 500

          var dates = data.map(function (d) {
            return d.date
          })

          var x = d3.time.scale()
              .domain([dates[0], dates[data.length - 1]])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - ((varNames.length ) * (varNames.length - 1) * 2.5), 20]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values; })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .interpolate('monotone')
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0) + varNames.indexOf(d.name) * 2 })
              .y1(function (d) { return y(d.y0 + d.y) + varNames.indexOf(d.name) * 2 });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]};
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight, name: name });
            });
          });

          stack(seriesArr)

          maxY = d3.max(seriesArr, function (c) { 
            return d3.max(c.values, function (d) { return d.y0 + d.y; });
          })
          y.domain([0, maxY]);

          var back = svg.selectAll()
            .data(seriesArr)
            .enter().append('g')

          back.append("path")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99) })
            .style("stroke", '#fff')

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '1em')

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("class", "streamPath")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return -100 })
          //   .attr('y', function (d) { return y(d.values[0].y0 + d.values[0].y) + varNames.indexOf(d.name) * 2 })
          //   .attr('height', function (d) { return y(d.values[0].y0) - y(d.values[0].y0 + d.values[0].y) })
          //   .attr('width', function (d) { return x(d.values[0].label) + 100 })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return x(d.values[d.values.length - 1].label) })
          //   .attr('y', function (d) { return y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) + varNames.indexOf(d.name) * 2  })
          //   .attr('width', 40)
          //   .attr('height', function (d) { return y(d.values[d.values.length - 1].y0) - y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          selection.append('text')
            .text(function (d) { return d.name })
            .style('font-weight', 'bold')
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
            .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          selection.append('text')
            .text(function (d) { return percent(d.values[0].weight) })
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2 })
            .attr('dy', '1em')

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', function (d) { return y(seriesArr[0].values[0].y0 + seriesArr[0].values[0].y ) })
            .attr('dx', -10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          var values = selection.append('g')

          data.pop()
          data.shift()

          values.selectAll('text').
            data(function (d) {
              d.values.pop()
              d.values.shift()
              return d.values
            })
            .enter().append('text')
              .attr('class', function (d) {
                return 'value d' + d.label
              })
              .text(function (d) { return d.value })
              .style('font-weight', 'bold')
              .attr('x', function (d) { return x(d.label) })
              .attr('y', function (d) { return y(d.y0 + (d.y / 2)) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '7')
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.label === dates[0]) return 'end'
              //   else if (d.label === dates[dates.length - 1]) return 'start'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.label === dates[0]) return -5
              //   else if (d.label === dates[dates.length - 1]) return 5
              //   else return 0             
              // })
              .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          var sums = svg.selectAll()
              .data(data)
            .enter().append('g').attr('class', function (d) {
              return 'day d' + d.date
            })

          sums.append('rect')
              .attr('class', function (d) { return 'd' + d.date })
              .attr('x', function (d) { return x(d.date) - 20})
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum) - 40
              })
              .attr('width', 40)
              .attr('height', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return height - y(sum)
              })

          sums.append('text')
              .text(function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return Math.round(sum)
              })
              .attr('x', function (d) { return x(d.date) })
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum)
              })
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.date === dates[0]) return 'start'
              //   else if (d.date === dates[dates.length - 1]) return 'end'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.date === dates[0]) return 10
              //   else if (d.date === dates[dates.length - 1]) return -10
              //   else return 0             
              // })
              .attr('dy', '-1.25em')
              .style('font-weight', 'bold')
              .style('text-decoration', 'underline')

          dates.pop()
          dates.shift()

          dates.forEach(function (date) {
            var day = d3.selectAll('.d' + date)
            day.on('mouseover', function () {
              day.classed('highlight', true)
            })
            day.on('mouseout', function () {
              day.classed('highlight', false)
            })
          })

          var xAxis = d3.svg.axis()
            .scale(x)
            .tickValues(dates.map(function (d) {
              return new Date(d)
            }))
            .tickFormat(d3.time.format('%b %d'))
            .orient("bottom")

          var axis = svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + (height - 40) + ")")
              .call(xAxis)
        }

        var labelVar = 'date'
        var data, varNames
        scope.render = function () {
          data = angular.copy(scope.data)
          varNames = d3.keys(data[0])
            .filter(function (key) { return key !== labelVar;})
          if (data.length > 1) {
            multi()
          } else {
            single()
          }
        }
      }
    }
  })
  .directive('range', function($window, $timeout, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        level: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 22)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        var lastLevel = null
        scope.$watch('level', function (level) {
          if (level !== lastLevel) {
            scope.render()
          }
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
              height = 22

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])
              .clamp(true)

          var brush = d3.svg.brush()
              .x(x)
              .extent([scope.level, scope.level])
              .on('brush', brushed)

          var axis = svg.append('g')
              .attr('class', 'axis')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickValues([]))
          
          var domain = axis.select('.domain')
              .attr('transform', 'translate(0, 10)')

          domain.select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
              .attr('class', 'halo')

          var slider = svg.append('g')
              .attr('class', 'slider')
              .call(brush)

          slider.selectAll('.extent,.resize')
              .remove()

          slider.select('.background')
              .attr('height', height)

          var pointy = function () {
            var cx = x(1),
              cy = 10
            return {
              set: function (pt) {
                cx = pt
                return [
                  { x: cx - 6, y: cy - 6 },
                  { x: cx + 6, y: cy - 6 },
                  { x: cx + 6, y: cy + 6 },
                  { x: cx, y: cy + 10 },
                  { x: cx - 6, y: cy + 6 }
                ]
              }

            }
          }

          var line = d3.svg.line()
            .x(function (d) { return d.x })
            .y(function (d) { return d.y })

          var handle = slider.append('path')
              .attr('class', 'handle')
              .attr('d', line(pointy().set(x(scope.level))) + 'Z')
              .style('display', 'none')

          // slider
          //     .call(brush.event)

          function brushed() {
            var value = brush.extent()[0]

            var v = x.invert(d3.mouse(this)[0])
            value = isNaN(v) ? value : v
            brush.extent([value, value])

            if (value) value = Math.round(value)

            handle
              .style('display', 'block')
              .attr('d', line( pointy().set( x(value) ) ) + 'Z')
            
            lastLevel = value
            $timeout(function () {
              scope.level = value
            })
          }
        }
      }
    }
  })
  .directive('bar', function($window, Aspects, $filter) {
    return {
      restrict: 'E',
      scope: {
        level: '=',
        diff: '=',
        name: '=',
        choice: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 40)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch('level', function () {
          scope.render()
        })

        scope.$watch('diff', function (diff) {
          scope.render()
        })

        scope.$watch('name', function () {
          scope.render()
        })

        scope.$watch('choice', function () {
          scope.render()
        }, true)

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var w = d3.select(element[0])[0][0].offsetWidth,
            width = w > 0 ? w : 100
            height = 40

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])

          var axis = svg.append('g')
              .attr('class', 'axis')
              .attr('transform', 'translate(0,' + (height - 20) + ')')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickPadding(12))

          axis.select('.domain').remove()

          var barBack = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(100) - x(0))
              .style('fill', Aspects.getColor(scope.name, -1))

          var bar = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(scope.level) - x(0))
              .style('fill', Aspects.getColor(scope.name, 100))

          var diff = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 205))

          var text = svg.append('text')
              .attr('y', 14)
              .attr('dy', '.375em')
              .style('fill', '#000')
              .style('font-weight', '400')

          if (scope.diff > 0) {
            var d = x(scope.diff) - x(0)
            diff
                .attr('x', x(scope.level))
                .attr('width', d)

            text.text('+' + $filter('round1')(scope.diff))
            var w = text.style('width').replace('px','')

            if (x(100) - x(scope.level) - x(scope.diff) > w) {
              text
                .attr('x', x(scope.level) + x(scope.diff))
                .attr('dx',  4)
            } else {
              text
                .attr('x', x(100) - w) 
                .attr('dx',  -4)
            }
          } else if (scope.diff < 0) {
            var d = x(-scope.diff) - x(0)
            diff
                .attr('x', x(scope.level) - d)
                .attr('width', d)
                .style('fill', Aspects.getColor(scope.name, 40))

            text.text($filter('round1')(scope.diff))

            text
              .attr('x', x(scope.level) + x(scope.diff))
              .attr('dx',  4)
          }
        }
      }
    }
  })
  .directive('diff', function($window, Aspects) {
    return {
      restrict: 'E',
      scope: {
        level: '=',
        diff: '=',
        name: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 40)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch('level', function () {
          scope.render()
        })

        scope.$watch('diff', function (diff) {
          scope.render()
        })

        scope.$watch('name', function () {
          scope.render()
        })

        scope.$watch('choice', function () {
          scope.render()
        }, true)

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var w = d3.select(element[0])[0][0].offsetWidth,
            width = w > 0 ? w : 100
            height = 40

          var x = d3.scale.linear()
              .domain([scope.level - 8, scope.level + 8])
              .range([6, width - 6])

          var axis = svg.append('g')
              .attr('class', 'axis')
              .attr('transform', 'translate(0,' + (height - 20) + ')')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickPadding(12))

          axis.select('.domain').remove()

          var barBack = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(100) - x(0))
              .style('fill', Aspects.getColor(scope.name, -1))

          var bar = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(scope.level) - x(0))
              .style('fill', Aspects.getColor(scope.name, 100))

          var diff = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 205))

          var text = svg.append('text')
              .attr('y', 14)
              .attr('dy', '.375em')
              .style('fill', '#000')
              .style('font-weight', '400')

          if (scope.diff > 0) {
            var d = x(scope.level + scope.diff) - x(scope.level)
            diff
                .attr('x', x(scope.level))
                .attr('width', d)

            text.text('+' + scope.diff)
            var w = text[0][0].getBoundingClientRect().width
            console.log(x(scope.level + scope.diff), x(scope.level + 8), w)

            if (x(scope.level + 8) - x(scope.level + scope.diff) < w) {
              text
                .attr('x', x(scope.level + scope.diff))
                .attr('text-anchor', 'end')
                .attr('dx',  -8)
            } else {
              text
                .attr('x', x(scope.level + scope.diff))
                .attr('text-anchor', 'start')
                .attr('dx',  8)
            }
          } else if (scope.diff < 0) {
            var d = x(scope.level - scope.diff) - x(scope.level)
            diff
                .attr('x', x(scope.level) - d)
                .attr('width', d)
                .style('fill', Aspects.getColor(scope.name, 40))

            text.text(scope.diff)

            text
              .attr('x', x(scope.level + scope.diff))
              .attr('dx', 8)
          }
        }
      }
    }
  })
  .directive('graph', function ($window, Aspects) {
    return {

      restrict: 'EA',
      scope: {
        links: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 400)

        var force = d3.layout.force()
            .charge(-200)
            .linkDistance(200)

        window.onresize = function() {
          scope.$apply()
        }

        var names = Aspects.names()
        var nodes = _.map(names, function (e) {
          return {
            name: e
          }
        })

        var links = []

        scope.$watch('links', function (edges) {
          links = []
          _.each(edges, function (e1, k1) {
            _.each(e1, function (e2, k2) {
              if (e2) {
                links.push({
                  source: names.indexOf(k1),
                  target: names.indexOf(k2),
                  value: e2
                })
              }
            })
          })
          scope.render()
        }, true)

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
            height = 400

          force
            .size([width, height])
            .nodes(nodes)
            .links(links)
            .on('tick', tick)
            .start()

          // build the arrow.
          svg.append("svg:defs").selectAll("marker")
              .data(["end"])      // Different link/path types can be defined here
            .enter().append("svg:marker")    // This section adds in the arrows
              .attr("id", String)
              .attr("viewBox", "0 -5 10 10")
              .attr("refX", 15)
              .attr("refY", -1.5)
              .attr("markerWidth", 6)
              .attr("markerHeight", 6)
              .attr("orient", "auto")
            .append("svg:path")
              .attr("d", "M0,-5L10,0L0,5");

          var path = svg.append("svg:g").selectAll("path")
            .data(force.links())
          .enter().append("svg:path")
            .attr("class", "link")
            .attr("marker-end", "url(#end)");

          var circle = svg.append("g").selectAll("circle")
              .data(force.nodes())
            .enter().append("circle")
              .attr("r", 6)
              .style('fill', function (d) { return Aspects.getColor(d.name, 100) })
              .call(force.drag);

          var text = svg.append("g").selectAll("text")
              .data(force.nodes())
            .enter().append("text")
              .attr("x", 8)
              .attr("y", ".31em")
              .text(function(d) { return d.name; });

          var value = svg.append("g").selectAll(".value")
              .data(force.links())
            .enter().append("text")
              .text(function(d) { return d.value; });

          function tick () {
            path.attr("d", linkArc);
            circle.attr("transform", transform);
            text.attr("transform", transform);
            value
              .attr('x', function (d) { return weight(d).x })
              .attr('y', function (d) { return weight(d).y })
          }

          function linkArc (d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy);
            return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
          }

          function weight (d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y
            return {
              x: d.source.x + dx / 4 + dy / 6,
              y: d.source.y + dy / 4 - dx / 6,
            }
          }

          function transform(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }

        }

        scope.render()
      }

    }

  })
  .directive('pie', function ($window, Aspects, Tricycle) {
    return {
      restrict: 'EA',
      scope: {
        responses: '=',
        weights: '=',
        sort: '@'
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .attr('class', 'pie')
          .style('width', '100%')

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('responses', function () {
          scope.render()
        }, true)

        scope.$watch('weights', function () {
          scope.render()
        }, true)

        var names = Aspects.names(),
          weights = _.map(names, function (e, i) {
            return Math.random()
          }),
          sum = _.reduce(weights, function (a, b) {
            return a + b
          }),
          data = _.map(names, function (e, i) {
            return {
              name: e,
              weight: weights[i] / sum
            }
          })

        scope.render = function () {
          if (scope.weights) {
            weights = scope.weights
            data = _.map(names, function (e, i) {
              return {
                name: e,
                weight: weights[e]
              }
            })
          }
          console.log(weights)
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
            height = width,
            radius = Math.min(width, height) / 2

          var arc = d3.svg.arc()
            .outerRadius(radius - 30)
            .innerRadius(0)

          var pie = d3.layout.pie()
            .sort(null)
            .value(function (d) { return d.weight })

          svg
              .attr('width', width)
              .attr('height', height)

          var g = svg.append('g')
              .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')
            .selectAll('.arc')
              .data(pie(data))
            .enter().append('g')
              .attr('class', function (d) { return 'arc ' + d.data.name.split(' ')[0] })

          g.append('path')
              .attr('d', arc)
              .style('fill', function (d) { return Aspects.getColor(d.data.name, 70) })
              .on('click', function (d) {
                clicked[d.data.name] = !clicked[d.data.name]
              })

          g.append('path')
              .attr('d', function (d) { return scope.responses ? level(scope.responses[d.data.name].level)(d) : level(100)(d) })
              .style('fill', function (d) { return Aspects.getColor(d.data.name, 140) })

          var text = svg.append('g')
              .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')
            .selectAll('.level')
              .data(pie(data))

          text.enter().append('text')
              .attr('class', function (d) { return 'level ' + d.data.name.split(' ')[0] })
              .attr('transform', function (d) { return 'translate(' + arc.centroid(d) + ')' })
              .attr('dy', '-.5em')
              .style('text-anchor', 'middle')
              .text(function(d) { return scope.responses ? scope.responses[d.data.name].level : '' })
          
          // text.enter().append('text')
          //     .attr('class', function (d) { return 'weight ' + d.data.name.split(' ')[0] })
          //     .attr('transform', function (d) { return 'translate(' + arc.centroid(d) + ')' })
          //     .attr('dy', '.5em')
          //     .style('text-anchor', 'middle')
          //     .text(function(d) { return d3.format('%')(scope.weights[d.data.name]) })

          g
            .on('mouseover', function (d) {
              d3.selectAll('text.' + d.data.name.split(' ')[0])
                .style('display', 'block')
              d3.selectAll('.arc path')
                .style('fill-opacity', '0.3')
              d3.selectAll('.arc.' + d.data.name.split(' ')[0] + ' path')
                .style('fill-opacity', '1')
            })
            .on('mouseout', function (d) {
              d3.selectAll('text.' + d.data.name.split(' ')[0])
                .style('display', 'none')
              d3.selectAll('.arc path')
                .style('fill-opacity', '1')
            })


          function cursor (d) {
            var pos = {
              x: d3.event.clientX - center.x,
              y: d3.event.clientY - center.y
            }
            var r = Math.sqrt(Math.pow(pos.x, 2) + Math.pow(pos.y, 2)),
              theta = Math.atan2(pos.y, pos.x) + Math.PI / 2
            return d3.svg.arc()
              .outerRadius(r)
              .innerRadius(r - 2)
              .startAngle(0)
              .endAngle(7)
            (d)
          }

          function level (r) {
            r = Math.sqrt(r / 100) * (radius - 30)
            return d3.svg.arc()
              .outerRadius(r)
              .innerRadius(0)
          }

          function setRadius (d) {
            var bounds = svg[0][0].getBoundingClientRect()
            var center = {
              x: bounds.left + width / 2,
              y: bounds.top + height / 2
            }
            var pos = {
              x: d3.event.clientX - center.x,
              y: d3.event.clientY - center.y
            }
            var r = Math.sqrt(Math.pow(pos.x, 2) + Math.pow(pos.y, 2)),
              theta = Math.atan2(pos.y, pos.x) + Math.PI / 2
            return d3.svg.arc()
              .outerRadius(Math.min(r, radius - 30))
              .innerRadius(0)
              .startAngle(d.startAngle)
              .endAngle(d.endAngle)
            (d)
          }

          var control = g.append('path')
              .style('fill', '#000')

          var clicked = {}

          // d3.selectAll('.arc').on('mousemove', function (d) {
          //   if (!clicked[d.data.name]) {
          //     d3.select(this).select('path.level')
          //     .attr('d', setRadius)
          //   }
          // })
        }
      }
    }
  })
  .directive('sicilian', function ($window, Aspects, Tricycle) {
    return {
      restrict: 'EA',
      scope: {
        responses: '=',
        weights: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .attr('class', 'sicilian')
          .style('width', '100%')

        svg.style('height', svg.style('width'))

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('responses', function () {
          scope.render()
        }, true)

        scope.$watch('weights', function () {
          scope.render()
        }, true)

        var sort = null
        attrs.$observe('sort', function (s) {
          sort = s
        })

        var names = Aspects.names()
        //   weights = _.map(names, function (e, i) {
        //     return Math.random()
        //   }),
        //   sum = _.reduce(weights, function (a, b) {
        //     return a + b
        //   }),
        //   data = _.map(names, function (e, i) {
        //     return {
        //       name: e,
        //       weight: weights[i] / sum
        //     }
        //   })

        // data = _.sortBy(data, function (d) {
        //   return d.weight * -1
        // })


        scope.render = function () {
          var data = _.map(names, function (a) {
            return {
              name: a,
              weight: scope.weights[a]
            }
          })
          data = _.sortBy(data, function (d) {
            if (sort === 'level') {
              return scope.responses[d.name].level
            } else {
              return d.weight * -1
            }
          })

          svg.selectAll('*').remove()

          var width = svg.style('width').replace('px','')

          var g = svg.selectAll()
              .data(data)
            .enter().append('g')
              .style('height', function (d) {
                return d.weight * width
              })

          g.append('rect')
              .attr('y', function (d) {
                return _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('width', function (d) {
                return width
              })
              .attr('height', function (d) {
                return d.weight * width
              })
              .style('fill', function (d) {
                return Aspects.getColor(d.name, 30)
              })

          g.append('rect')
              .attr('y', function (d) {
                return _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('width', function (d) {
                return (scope.responses[d.name].level / 100) * width
              })
              .attr('height', function (d) {
                return d.weight * width
              })
              .style('fill', function (d) {
                return Aspects.getColor(d.name, 140)
              })

          g.append('text')
              .attr('class', 'weight')
              .attr('y', function (d) {
                return d.weight * width * 0.5 + _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('dy', '.5em')
              .text(function (d) {
                return d3.format('%')(d.weight)
              })
              
        }
      }
    }
  })
  .directive('vertical', function ($window, Aspects, Tricycle) {
    return {
      restrict: 'EA',
      scope: {
        responses: '=',
        weights: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .attr('class', 'sicilian')
          .style('width', '100%')
          .style('padding-bottom', '100%')

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('responses', function () {
          scope.render()
        }, true)

        scope.$watch('weights', function () {
          scope.render()
        }, true)

        var sort = null
        attrs.$observe('sort', function (s) {
          sort = s
        })

        var names = Aspects.names()
        //   weights = _.map(names, function (e, i) {
        //     return Math.random()
        //   }),
        //   sum = _.reduce(weights, function (a, b) {
        //     return a + b
        //   }),
        //   data = _.map(names, function (e, i) {
        //     return {
        //       name: e,
        //       weight: weights[i] / sum
        //     }
        //   })

        // data = _.sortBy(data, function (d) {
        //   return d.weight * -1
        // })


        scope.render = function () {
          var data = _.map(names, function (a) {
            return {
              name: a,
              weight: scope.weights[a]
            }
          })
          data = _.sortBy(data, function (d) {
            if (sort === 'left') {
              return scope.responses[d.name].level
            } else {
              return -scope.responses[d.name].level
            }
          })

          svg.selectAll('*').remove()

          var width = svg.style('width').replace('px','')

          var g = svg.selectAll()
              .data(data)
            .enter().append('g')
              .style('height', function (d) {
                return d.weight * width
              })

          g.append('line')
              .attr('x1', 0)
              .attr('x2', width)
              .attr('y1', 0)
              .attr('y2', 0)
              .attr('stroke', '#000')
              .attr('stroke-width', '1px')

          g.append('rect')
              .attr('x', function (d) {
                return _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('y', function (d) {
                return width - (scope.responses[d.name].level / 100) * width
              })
              .attr('height', function (d) {
                return (scope.responses[d.name].level / 100) * width
              })
              .attr('width', function (d) {
                return d.weight * width
              })
              .style('fill', function (d) {
                return Aspects.getColor(d.name, 140)
              })

          g.append('text')
              .attr('class', 'weight')
              .attr('y', function (d) {
                return d.weight * width * 0.5 + _.reduce(data, function (a, b) {
                  if (data.indexOf(b) >= data.indexOf(d)) {
                    return a
                  } else {
                    return a + b.weight * width
                  }
                }, 0)
              })
              .attr('dy', '.5em')
              .text(function (d) {
                return d3.format('%')(d.weight)
              })
              
        }
      }
    }
  })
  .directive('fix', function ($window) {
    return {
      restrict: 'EA',
      scope: {},
      link: function(scope, element, attrs) {
        var div = d3.select(element[0])
        var parent = d3.select(div[0][0].parentNode)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          var bounds = parent[0][0].getBoundingClientRect()
          console.log(bounds, window.scrollLeft)
          div.style({
            'position': 'fixed',
            'padding': parent.style('padding'),
            'top': window.scrollTop ? bounds.top + window.scrollTop + 'px' : bounds.top + 'px',
            'left': window.scrollLeft ? bounds.left + window.scrollLeft +  'px' : bounds.left + 'px',
            'width': bounds.width + 'px'
          })
        }
      }
    }
  })
  .directive('prog', function ($window) {
    return {
      restrict: 'EA',
      scope: {
        complete: '='
      },
      link: function(scope, element, attrs) {
         var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 8)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('complete', function () {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()
          var bounds = svg[0][0].getBoundingClientRect()
          svg.append('rect')
            .attr('height', 4)
            .attr('width', bounds.width * scope.complete)
            .attr('fill', '#559')
        }
      }
    }
  })


/* Filters */

angular.module('well.filters', [])
  .filter('round2', function () {
    return function (n) {
      return Number(n).toFixed(2)
    }
  })
  .filter('round1', function () {
    return function (n) {
      return n % 1 === 0 ? n : Number(n).toFixed(1)
    }
  })
  .filter('percent', function () {
    return function (n) {
      return d3.format('%')(n)
    }
  })
  .filter('capitalize', function () {
    return function (string) {
      return string ? string.charAt(0).toUpperCase() + string.slice(1) : ''
    }
  })

/* Services */

angular.module('well.services', [])
  .factory('User', function ($q, $rootScope, $firebaseSimpleLogin, $firebase, $location) {
    var deferred = $q.defer()
    var auth = $firebaseSimpleLogin(new Firebase('https://well.firebaseio.com/'))

    $rootScope.$on('$firebaseSimpleLogin:login', function(e, user) {
      console.log('User ' + user.id + ' successfully logged in!')
    })

    var randomUserId = Math.round( Math.random() * 100000 )

    return {
      login: function (email, password) {
        return auth.$login('password', {
          email: email,
          password: password,
          rememberMe: true
        })
      },
      signup: function (email, password) {
        return auth.$createUser(email, password)
      },
      logout: function () {
        auth.$logout()
        $location.path('/')
      },
      promise: function () {
        return deferred.promise
      },
      info: function () {
        return auth.user
      },
      record: function (data) {
        return history.$add(data)
      },
      submit: function (method, data) {
        var fb
        if (auth.user) {
          fb = $firebase(new Firebase('https://well.firebaseio.com/' + method + '/' + auth.user.md5_hash)).$asArray()
        } else {
          var r = 'random' + randomUserId
          console.log('User not logged in!!! Data recorded as ' + r)
          fb = $firebase(new Firebase('https://well.firebaseio.com/' + method + '/' + r)).$asArray()
        }
        fb.$add(data)
        console.log(data, 'Added to ' + method)
      },
      data: function (method) {
        var userId = auth.user ? auth.user.md5_hash : randomUserId
        var fb = $firebase( new Firebase('https://well.firebaseio.com/' + method + '/' + userId ) )
        var data = fb.$asArray()
        return data.$loaded()
      }
    }
  })
  .factory('Aspects', function () {
    var aspects = {
      'Family Well-Being': 'the overall well-being of you and your family',
      'Family Happiness': 'your and your family’s happiness',
      'Health': 'your health (physical and mental)',
      'Morality': 'your morality (that is, living up to your personal values)',
      'Family Relationships': 'your family relationships',
      'Financial Security': 'your financial security',
      'Options & Possibilities': 'your options and possibilities in life',
      'Meaning & Value': 'your sense that your life is meaningful and has value',
      'Life Satisfaction': 'how satisfied you are with your life',
      'Enough Time & Money': 'your feeling that you have enough time and money',
      'Peace, Calm & Harmony': 'how peaceful, calm, and harmonious your life is',
      'Independence': 'your feeling of independence and self-sufficiency',
      'Making a Difference': 'your sense that you are making a difference in the world',
      'Worthwileness': 'your feeling that the things you do are worthwhile',
      'Safety & Security': 'your physical safety and security',
      'Respect': 'your being treated with dignity and respect by others',
      'Amount of Day Happy': 'how much of the time you feel happy',
      'Improvement': 'your sense that things are getting better and better',
      'Overall Happiness': 'how happy you are overall with your life',
      'Life Longevity': 'your chance to live a long life'
    }

    var five = _.sample(Object.keys(aspects), 5)

    return {
      names: function () {
        return five
      },
      texts: function () {
        return aspects
      },
      getColor: function (aspect, level) {
        var h = (five.indexOf(aspect) + 6) * 70,
            l =  .99 + (level / 100) * -.24
        return d3.hsl(h, .8, l).toString()
      }
    }
  })
  .factory('Style', function ($window) {
    var sheet = (function() {
      var style = document.createElement('style')

      // Add a media (and/or media query) here if you'd like!
      // style.setAttribute("media", "screen")
      // style.setAttribute("media", "@media only screen and (max-width : 1024px)")

      // WebKit hack :(
      style.appendChild(document.createTextNode(''))

      document.head.appendChild(style)

      return style.sheet
    })()

    return function (selector, rules, index) {
      if (sheet.insertRule) {
        sheet.insertRule(selector + "{" + rules + "}", index);
      } else {
        sheet.addRule(selector, rules, index);
      }
    }
  })
  .factory('Slide', function () {
    return function (element, duration) {
      var neu = d3.select(element).style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')

      var parent = neu.select(function () { return this.parentNode })

      parent.style('pointer-events', 'none')

      old
        .transition()
          .duration(duration)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
            parent.style('pointer-events', 'auto')
          })

      neu
        .transition()
          .duration(duration)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }
  })
angular.module('well.survey', [])
  .controller('SurveyCtrl', function ($scope, Aspects, Survey, Style, $location) {
    Survey.reset()
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    $scope.responses = Survey.responses()
    $scope.survey = {
      finished: false
    }

    $scope.$watch('responses', function () {
      if (Survey.responded()) {
        $scope.survey.finished = true
      }
    }, true)
  })
  .factory('Survey', function (Aspects) {
    var aspects = Aspects.names(),
      responses = {}

    _.each(aspects, function (a) {
      responses[a] = {}
      responses[a].level = null
    })

    return {
      responses: function () {
        return responses
      },
      respond: function (aspect, level) {
        responses[aspect].level = level
      },
      responded: function () {
        return aspects.every(function (a) {
          return responses[a].level
        })
      },
      randomize: function () {
        console.log('randomized')
        for (var i in aspects) {
          responses[aspects[i]].level = Math.max( Math.ceil(Math.random() * 99), Math.max( Math.ceil(Math.random() * 99), Math.ceil(Math.random() * 99) ) )
        }
        return responses
      },
      reset: function () {
        _.each(aspects, function (a) {
          responses[a] = {}
          responses[a].level = null
        })
        return responses
      }
    }
  })
angular.module('well.tradeoff', [])
  //
  // --------------------------------------------------
  //
  //                  CONTROLLERS
  //
  // --------------------------------------------------
  //
  .controller('ThreeCtrl', function ($scope, Choices, Three, Two, Slide, $location) {
    $scope.choice = Three.choice()
    $scope.choices = Choices

    $scope.choose = function (i) {
      $scope.choice = Three.choice(i)
      Slide('.options', 300)
    }

    // the last choice returns false
    $scope.$watch('choice', function (c) {
      $scope.choices = Choices
      $scope.completed = Choices.step++ / (Three.numberOfQs + Two.numberOfQs)
      if (!c) {
        // TODO: randomly direct to overlap module, or check for suspect overlaps
        $location.path('two')
      }
    })
  })
  .controller('TwoCtrl', function ($scope, Choices, Two, Three, Slide, $location) {
    $scope.choice = Two.choice()
    $scope.choices = Choices

    $scope.choose = function (i) {
      $scope.choice = Two.choice(i)
      Slide('.options', 300)
    }

    // the last choice returns false
    $scope.$watch('choice', function (c) {
      $scope.choices = Choices
      $scope.completed = Choices.step++ / (Three.numberOfQs + Two.numberOfQs)
      if (!c) {
        // if (!User.info()) {
          $location.path('complete')
        // } else {
        //   $location.path('history')
        // }
      }
    })
  })
  .controller('CompleteCtrl', function ($scope, Aspects, Survey, Choices, User) {
    $scope.weights = Choices.weights()
    $scope.aspects.sorted = _.sortBy($scope.aspects.names, function (n) {
      return $scope.weights[n] * -1
    })

    $scope.data = User.data('threetwo')
    
    // generate some dummy data for testing
    if (!$scope.weights) {
      $scope.weights = {}
      _.each($scope.aspects.names, function (a) {
        $scope.weights[a] = Math.random()
      })
      console.log($scope.weights)

      var sumW = 0
       _.each($scope.aspects.names, function (a) {
        sumW += $scope.weights[a]
      })

      _.each($scope.aspects.names, function (a) {
        $scope.weights[a] = $scope.weights[a] / sumW
      })
    }
  })
  //
  // --------------------------------------------------
  //
  //                  SERVICES
  //
  // --------------------------------------------------
  //
  .factory('Tradeoff', function () {
    var tradeoff = {}
    // randomly decide whether to display positive or negative tradeoffs
    tradeoff.sign = Math.random() > 0.5 ? 'positive' : 'negative'
    console.log(tradeoff.sign)
    // 2 * i + 1 || 2 * i + 2
    // Each tuple represents the change in Option 1 for aspect X and the change in Option 2 for aspect Y respectively 
    tradeoff.positive_tradeoffs = [         
                            [4,4],
              [1,4],                   [4,1],
        [1,8],       [2,4],      [4,2],      [8,1],
      // MRS based on final tradeoff where each number represents the MRS of Y in terms of X as a power of 2
      // <--- indicates relative pref for X   ---> indicates pref for Y
      -4,  -2.5,  -1.5,  -0.5, 0.5,  1.5,  2.5,  4
    ]

    // The negative tradeoffs have the reverse mapping as the positive ones
    tradeoff.negative_tradeoffs = [         
                          [-4,-4],
            [-4,-1],                 [-1,-4],
        [-8,-1],    [-4,-2],    [-2,-4],   [-1,-8],
      4,  2.5,  1.5,  0.5, -0.5,  -1.5,  -2.5,  -4
    ]

    // where a and b are the rating levels for aspects a and b
    tradeoff.checkCorners = function (a, b) {
      if (a > 92 && b < 8) {
        return 'skip'
      } else if (a < 8 && b > 92) {
        return 'skip'
      } else if (a > 92 || b > 92) {
        return 'negative'
      } else if (a < 8 || b < 8) {
        return 'positive'
      } else {
        return null
      }
    }

    // where a and b are the rating levels for aspects a and b
    tradeoff.values = function (a, b) {
      var s = this.checkCorners(a, b) === null ? this.sign : this.checkCorners(a, b)
      if (s === 'positive') {
        return this.positive_tradeoffs
      } else if (s === 'negative') {
        return this.negative_tradeoffs
      } else {
        return 'skip'
      }
    }
    return tradeoff
  })
  // The Choices service records decisions and generates MRS values / weights
  .factory('Choices', function (Aspects, Survey, Tradeoff, User) {
    var aspects = Aspects.names()
    var choices = {}
    choices.step = 0
    choices.levels = Survey.responses()
    choices.sign = Tradeoff.sign
    choices.skipped = []
    choices.decisions = []
    choices.MRS = {}
    _.each(aspects, function (aspect) {
      choices.MRS[aspect] = {}
    })

    // add MRS value where d is the denomitar aspect, n the numerator and v the value as a power of 2
    choices.addMRS = function (n, d, v) {
      this.MRS[d][n] = v
      this.MRS[n][d] = -v
    }

    // compute the MRS value of aspect n in terms of d, assuming one step of transitivity if necessary
    choices.getMRS = function (n, d) {
      if (d === n) {
        return 1
      } else if (this.MRS[d][n]) {
        return this.MRS[d][n]
      } else if (Object.keys(this.MRS[d]).length) {
        // check if there's an alternative route to n
        var alt = _.find(Object.keys(choices.MRS[d]), function (alt) {
          return choices.MRS[alt][n]
        })
        if (alt) {
          console.log(alt, choices.MRS[d])
          return choices.MRS[d][alt] + choices.MRS[alt][n]
        } else {
          return false
        }
      } else {
        return false
      }
    }

    // records each decision
    choices.record = function (pair, i) {
      this.decisions.push({
        aspects: pair,
        i: i,
        t: Date.now()
      })

      // if this is a final tradeoff
      if (i > 6) {
        // MRS of pair[1] in terms of pair[0]
        this.addMRS(pair[1], pair[0], Tradeoff.values(this.levels[pair[0]].level, this.levels[pair[1]].level)[i])
      }
    }

    choices.weights = function () {
      var sum = 0
      var ws = _.map(aspects, function (a) {
        var mrs = choices.getMRS(a, aspects[0])
        sum += Math.pow(2, mrs)
        return Math.pow(2, mrs)
      })

      var weights = {}
      _.each(aspects, function (aspect, i) {
        weights[aspect] = ws[i] / sum
      })
      return weights
    }

    choices.submit = function () {
      User.submit('threetwo', {
        aspects: aspects,
        responses: this.levels,
        decisions: this.decisions,
        skipped: this.skipped,
        MRS: this.MRS,
        weights: this.weights()
      })
    }

    return choices
  })
  .factory('Three', function (Aspects, Survey, Tradeoff, Choices) {
    var aspects = Aspects.names()
    var responses = Survey.responded() ? Survey.responses() : Survey.randomize()

    var three = {}
    three.aspects = _.sample(aspects, 3)

    three.pairs = _.map(three.aspects, function (aspect, i) {
      return [aspects[i], aspects[(i + 1) % 3]]
    })
    three.pairs = _.filter(three.pairs, function (pair) {
      var skip = Tradeoff.values(responses[pair[0]].level, responses[pair[1]].level) === 'skip'
      if (skip) Choices.skipped.push(pair)
      return !skip
    })

    three.numberOfQs = three.pairs.length * 3
    three.pair = {}

    three.choice = function (i) {
      if (!i) {
        i = 0
        this.pair = this.pairs.pop()
      } else {
        Choices.record(this.pair, i)
      }

      if (i > 6) {
        i = 0
        if (this.pairs.length) {
          this.pair = this.pairs.pop()
        } else {
          return false
        }
      }

      var tradeoff = Tradeoff.values(responses[this.pair[0]].level, responses[this.pair[1]].level)
      return {
        aspects: this.pair,
        tradeoff: tradeoff[i],
        i: i
      }
    }

    return three
  })
  .factory('Two', function (Aspects, Survey, Tradeoff, Choices, Three) {
    var aspects = Aspects.names()
    var responses = Survey.responded() ? Survey.responses() : Survey.randomize()

    var two = {}
    two.aspects = _.difference(aspects, Three.aspects)

    two.pairs = [ [aspects[3], aspects[1]], [aspects[4], aspects[2]] ] 
    two.pairs = _.filter(two.pairs, function (pair) {
      var skip = Tradeoff.values(responses[pair[0]].level, responses[pair[1]].level) === 'skip'
      if (skip) Choices.skipped.push(pair)
      return !skip
    })

    two.numberOfQs = (two.pairs.length + 2) * 3
    two.pair = {}

    two.choice = function (i) {
      if (!i) {
        i = 0
        this.pair = this.pairs.pop()
      } else {
        Choices.record(this.pair, i)
      }

      if (i > 6) {
        i = 0
        if (this.pairs.length) {
          this.pair = this.pairs.pop()
        } else {
          return false
        }
      }

      var tradeoff = Tradeoff.values(responses[this.pair[0]].level, responses[this.pair[1]].level)
      return {
        aspects: this.pair,
        tradeoff: tradeoff[i],
        i: i
      }
    }

    return two
  })
angular.module('well.test', [])
  //
  // --------------------------------------------------
  //
  //                  CONTROLLERS
  //
  // --------------------------------------------------
  //
  .controller('TradeOffCtrl', function ($scope, Aspects, TradeOff) {
    $scope.aspects = Aspects.names()

    $scope.responses = TradeOff.responses()
    var choice = TradeOff.loadChoice()
    $scope.left = choice[0]
    $scope.right = choice[1]

    $scope.choice = TradeOff.choice()
    $scope.$watch('left', function () {
      $scope.choice = TradeOff.choice()
    }, true)
    $scope.$watch('right', function () {
      $scope.choice = TradeOff.choice()
    }, true)

    $scope.choose = function (p) {
      choice = TradeOff.choose(p)
      $scope.left = choice[0]
      $scope.right = choice[1]

      var neu = d3.select('.options').style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')


      old.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
          })

      neu.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }

    $scope.prefs = {
      degree: null,
      range: [null, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5],
      next: function () {
        console.log(this.degree)
        $scope.choose(this.degree)
        this.degree = 0
      }
    }
  })
  .controller('HistoryCtrl', function ($scope, User) {
    $scope.data = null
    User.promise().then(function () {
      var history = User.history()
      var keys = history.$getIndex()
      var data = [], weights = []
      for (var i in keys) {
        var responses = history[keys[i]].responses
        var aspects = history[keys[i]].aspects
        var datum = {
          date: history[keys[i]].date
        }
        aspects.forEach(function (a) {
          var weight = 1
          if (responses[a].lower && responses[a].upper) {
            weight = (responses[a].lower[0] * responses[a].upper[1] + responses[a].lower[1] * responses[a].upper[0]) / (responses[a].lower[1] * responses[a].upper[1] * 2)
          } 
          datum[a] = {
            value: responses[a].level,
            weight: weight
          }
          if (weights[a]) {
            weights[a] += weight
          } else {
            weights[a] = weight
          }
        })
        data.push(datum)
      }

      var sum = 0
      for (var a in weights) {
        sum += weights[a]
      }
      for (var a in weights) {
        weights[a] /= sum
      }
      data.forEach(function (e) {
        for (var a in e) {
          e[a].weight = weights[a]
        }
      })
      $scope.data = data
    })
  })
  .controller('TestCtrl', function ($scope, $routeParams) {
    var data = []
    for (var i = 0; i < Number($routeParams.num); i += 1) {
      var date = (new Date('January 1 2012')).getTime() + Math.round(30 * (i + Math.random())) * 86400000
      data.push({
        'Health': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Happiness': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Freedom': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Financial Security': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Meaning/Value': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        date: date
      })
    }
    console.log(data)
    var logNormal = d3.random.logNormal()

    var weights = [1, logNormal(), logNormal(), logNormal(), logNormal()]
    var w_sum = weights.reduce(function (a, b) {
      return a + b
    })
    weights = weights.map(function (d) {
      return d / w_sum
    })

    var w = {
      'Health': weights[0],
      'Happiness': weights[1],
      'Freedom': weights[2],
      'Financial Security': weights[3],
      'Meaning/Value': weights[4]
    }

    var weights = d3.range(data.length).map(function () {
      return w
    })

    var labelVar = 'date'
    var varNames = d3.keys(data[0])
      .filter(function (key) { return key !== labelVar;});

    data.forEach(function (e, i, a) {
      varNames.forEach(function (name) {
        e[name].weight = weights[i][name]
      })
    })

  $scope.data = data
  })
  .controller('mrt', function ($scope, $routeParams) {
    $scope.mrt = {
      a : {
        name: 'Freedom',
        level: 73,
        diff: 0,
        change: 0
      },
      b : {
        name: 'Health',
        level: 92,
        diff: 0,
        change: 0
      }
    }

    $scope.$watch('mrt', function () {
      $scope.mrt.a.diff = $scope.mrt.a.change
      if ($routeParams.concavity === 'constant') {
        var d = 100 - ($scope.mrt.b.level - (2 * $scope.mrt.a.diff))
        if (d < 0) {
          $scope.mrt.a.diff = -(100 - $scope.mrt.b.level) / 2
        } else if (d > 100) {
          $scope.mrt.a.diff = $scope.mrt.b.level / 2
        }
        $scope.mrt.b.diff = -2 * $scope.mrt.a.diff
      } else {
        var square = $scope.mrt.a.change < 0 ? Math.round(Math.sqrt(-$scope.mrt.a.change)) : -Math.pow($scope.mrt.a.change, 2)
        var d = $scope.mrt.b.level + square
        if (d < 0) {
          $scope.mrt.a.diff = Math.floor(Math.sqrt($scope.mrt.b.level))
        } else if (d > 100) {
          $scope.mrt.a.diff = -Math.pow(100 - $scope.mrt.b.level, 2)
        }
        $scope.mrt.b.diff = $scope.mrt.a.diff < 0 ? Math.round(Math.sqrt(-$scope.mrt.a.diff)) : -Math.pow($scope.mrt.a.diff, 2)
      }
    }, true)
  })
  .controller('SPCtrl', function ($scope, Aspects, SP, Survey) {
    $scope.aspects =  {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    var choices = SP.nextChoice()

    $scope.left = choices[0]
    $scope.right = choices[1]

    $scope.choose = function (p) {
      var lr = SP.nextChoice()
      $scope.left = lr[0]
      $scope.right = lr[1]
      $scope.aspects.names 

      var neu = d3.select('.options').style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')


      old.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
          })

      neu.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }

    $scope.prefs = {
      degree: null,
      range: [null, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5],
      next: function () {
        console.log(this.degree)
        $scope.choose(this.degree)
        this.degree = 0
      }
    }


  })
  .controller('CycleCtrl', function ($scope, Cycle, Aspects) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    $scope.responses = Cycle.responses()
    $scope.choice = Cycle.nextChoice()
    $scope.getMax = Cycle.getMax
    $scope.getMin = Cycle.getMin
    
    $scope.choose = function (a, b, d) {
      Cycle.path(a, b, d)
      $scope.choice = Cycle.nextChoice()
      $scope.edges = {
        forward: Cycle.forwardLinks(),
        back: Cycle.backLinks()
      }
      $scope.order = Cycle.order()
    }

    $scope.edges = {
      forward: Cycle.forwardLinks(),
      back: Cycle.backLinks()
    }
  })
  .controller('TricycleCtrl', function ($scope, Tricycle, Aspects) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    $scope.responses = Tricycle.responses()
    $scope.choice = Tricycle.nextChoice()
    $scope.getMax = Tricycle.getMax
    $scope.getMin = Tricycle.getMin
    $scope.median = Tricycle.median
    $scope.sum = Tricycle.sum
    $scope.weights = function () {
      if (!$scope.choice) {
        return Tricycle.weights()
      }
    }
    $scope.order = Tricycle.order()
    
    $scope.choose = function (p, a, b, a_d, b_d) {
      Tricycle.record(p, a, b, a_d, b_d, Date.now())
      if (p === a) {
        Tricycle.path(b, a, b_d / a_d)
      } else {
        Tricycle.path(a, b, a_d / b_d)
      }
      $scope.choice = Tricycle.nextChoice()
      $scope.edges = {
        forward: Tricycle.forwardLinks(),
        back: Tricycle.backLinks()
      }
    }

    $scope.edges = {
      forward: Tricycle.forwardLinks(),
      back: Tricycle.backLinks()
    }
  })
  .controller('MockCtrl', function ($scope, Aspects, Survey) {
    $scope.aspects.names = Aspects.names()
    $scope.color = Aspects.getColor
    $scope.responses = Survey.randomize()
    $scope.weights = {}
    $scope.MRS = {}
    _.each($scope.aspects.names, function (a) {
      $scope.MRS[a] = 0
    })

    $scope.$watch('MRS', function () {
      var sum = _.reduce($scope.aspects.names, function (a, b) {
        return a + Math.pow(2, $scope.MRS[b])
      }, 0)
      _.each($scope.aspects.names, function (a) {
        $scope.weights[a] = Math.pow(2, $scope.MRS[a]) / sum
      })
    }, true)
  })
  .controller('MRTCtrl', function ($scope, SP) {
    $scope.choice = SP.mrt()

    $scope.$watch('choice', function () {
      if (!isNaN($scope.choice.a.change)) {
        $scope.choice.a.diff = $scope.choice.a.change
        var d = 100 - ($scope.choice.b.level - (2 * $scope.choice.a.diff))
        if (d < 0) {
          $scope.choice.a.diff = Math.floor((100 - $scope.choice.b.level) / -2)
        } else if (d > 100) {
          $scope.choice.a.diff = Math.floor(($scope.choice.b.level) / 2)
        }
        $scope.choice.b.diff = -2 * $scope.choice.a.diff
      }
    }, true)
  })
  .controller('SortCtrl', function ($scope, Sort) {
    $scope.choices = Sort.nextChoices()
    $scope.next = function () {
      $scope.choices = Sort.choose($scope.pref)
      $scope.pref = {}
    }

    $scope.pref = {}
    $scope.$watch('pref', function () {
      $scope.finished = _.every($scope.choices.comparisons, function (a) {
        return $scope.pref[a] === 1 || $scope.pref[a] === 2
      })
      $scope.completed = $scope.choices.top ? 1 : _.size($scope.pref) / $scope.choices.comparisons.length
    }, true)

    $scope.prevDone = function (i) {
      return i === $scope.choices.comparisons.length - 1 || $scope.pref[$scope.choices.comparisons[i + 1]] === 1 || $scope.pref[$scope.choices.comparisons[i + 1]] === 2
    } 
  })
  .controller('RateCtrl', function ($scope, Rate) {
    $scope.choice = Rate.nextChoice()
    $scope.choose = function (a) {
      $scope.choice = false
      $scope.percent = Rate.choose(a)
    }
    $scope.rate = function (p) {
      $scope.choice = Rate.rate(p)
    }

    $scope.color = 'Health'
  })
  .controller('TesttradeCtrl', function ($scope, TestTradeoff) {
    $scope.test = null
  })
  //
  // --------------------------------------------------
  //
  //                  SERVICES
  //
  // --------------------------------------------------
  //
  .factory('Sort', function (Aspects) {
    var aspects = _.shuffle(Aspects.twenty())
    var pivot = _.sample(aspects)
    var comp
    aspects.splice(aspects.indexOf(pivot), 1)

    var topAspects = []

    var methods = {
      nextChoices: function () {
        return {
          pivot: pivot,
          comparisons: aspects,
          candidates: topAspects
        }
      },
      choose: function (prefs) {
        var preferred = []
        _.each(prefs, function (n, a) {
          if (n === 2) preferred.push(a)
        })

        if (topAspects.length + preferred.length === 5) {
          return {
            top: topAspects.concat(preferred)
          }
        } else if (topAspects.length + preferred.length === 4) {
          preferred.push(pivot)
          return {
            top: topAspects.concat(preferred)
          }
        } else if (topAspects.length + preferred.length > 5) {
          aspects = _.shuffle(preferred)
          pivot = _.sample(aspects)
          aspects.splice(aspects.indexOf(pivot), 1)
        } else {
          preferred.push(pivot)
          topAspects = topAspects.concat(preferred)
          aspects = _.shuffle(_.difference(aspects, preferred))
          pivot = _.sample(aspects)
          aspects.splice(aspects.indexOf(pivot), 1)
        }
        return methods.nextChoices()
      }
    }

    return methods
  })
  .factory('Rate', function (Aspects) {
    var aspects = _.shuffle(Aspects.twenty())
    var a, b, n, d
    var ratings = {}

    var methods = {
      nextChoice: function () {
        a = _.sample(aspects)
        aspects.splice(aspects.indexOf(a), 1)
        b = _.sample(aspects)
        aspects.splice(aspects.indexOf(b), 1)

        return {
          a: a,
          b: b
        }
      },
      choose: function (aspect) {
        d = aspect
        n = aspect === a ? b : a
        return {
          n: n,
          d: d,
          p: 100
        }
      },
      rate: function (p) {
        ratings[d] = [n, p]
        return methods.nextChoice()
      }
    }

    return methods
  })
  .factory('Tricycle', function (Aspects, Survey, User, $location) {
    var aspects = Aspects.names(),
      responses = Survey.responded() ? Survey.responses() : Survey.randomize(),
      edges = {},
      backLinks = {},
      edge = {},
      shuffled = _.shuffle(aspects),
      i = 0,
      j = 1,
      choices = []

    _.each(aspects, function (e) {
      edge[e] = null
    })

    _.each(aspects, function (e, i) {
      edges[e] = _.clone(edge)
    })

    _.each(aspects, function (e, i) {
      backLinks[e] = _.clone(edge)
    })

    var methods = {
      responses: function () {
        return responses
      },
      nextChoice: function () {
        var factor = null
        if (j === (i + 2) % 5) {
          if (edges[shuffled[j]][shuffled[i]]) {
            i += 1
          } else if (edges[shuffled[i]][shuffled[j]]) {
            factor = 'double'
          }
        } else if (j === (i + 1) % 5) {
          if (edges[shuffled[i]][shuffled[j]]) {
            j = (j + 1) % 5
          } else if (edges[shuffled[j]][shuffled[i]]) {
            factor = 'halve'
          }
        }

        console.log(i, j, factor)

        if (i === 5) {
          return false
        } else {
          var a_d = b_d = Math.min( Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level), 5)

          if (factor === 'halve') {
            b_d = edges[shuffled[j]][shuffled[i]] * 2 * a_d
            if (b_d > 100 - responses[shuffled[j]].level) {
              b_d = 100 - responses[shuffled[j]].level
              a_d = b_d / (edges[shuffled[j]][shuffled[i]] * 2)
              if (b_d > 100 - responses[shuffled[j]].level) {
                b_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                a_d = b_d / (edges[shuffled[j]][shuffled[i]] * 2)
              }
            }
          } 

          else if (factor === 'double') {
            a_d = edges[shuffled[i]][shuffled[j]] * 2 * b_d
            if (a_d > 100 - responses[shuffled[i]].level) {
              a_d = 100 - responses[shuffled[j]].level
              b_d = a_d / (edges[shuffled[i]][shuffled[j]] * 2)
              if (a_d > 100 - responses[shuffled[i]].level) {
                a_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                b_d = a_d / (edges[shuffled[i]][shuffled[j]] * 2)
              }
            }
          }

          else if (j === (i + 1) % 5 && edges[shuffled[(i + 1) % 5]][shuffled[(i - 1) % 5]] && edges[shuffled[(i - 1) % 5]][shuffled[i]]) {
            console.log('predicted')
            var prediction = edges[shuffled[(i + 1) % 5]][shuffled[(i - 1) % 5]] * edges[shuffled[(i - 1) % 5]][shuffled[i]]
            b_d = prediction * 2 * a_d
            if (b_d > 100 - responses[shuffled[j]].level) {
              a_d = 100 - responses[shuffled[i]].level
              b_d = a_d / prediction * 2
              if (b_d > 100 - responses[shuffled[j]].level) {
                a_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                b_d = a_d / prediction * 2
              }
            }
          }

          return {
            a: {
              name: shuffled[i],
              level: responses[shuffled[i]].level,
              diff: a_d
            }, 
            b: {
              name: shuffled[j],
              level: responses[shuffled[j]].level,
              diff: b_d
            }
          }
        }

      },
      getMin: function (a, b) {
        c = shuffled[(shuffled.indexOf(a) + 1) % 5]
        if (a === b) {
          return 1
        } else if (edges[a][b]) {
          return edges[a][b]
        } else if (i < 5) {
          return 'X'
        } else {
          return edges[a][c] * methods.getMin(c, b)
        }
      },
      getMax: function (a, b) {
        return 1 / methods.getMin(b, a)
      },
      median: function (a, b) {
        return (methods.getMin(a, b) + methods.getMax(a, b)) / 2
      },
      sum: function (a) {
        var s = 0
        _.each(aspects, function (b) {
          s += methods.median(a, b)
        })
        return s
      },
      path: function (a, b, d) {
        edges[a][b] = d
        backLinks[b][a] = 1 / d
      },
      forwardLinks: function () {
        return edges
      },
      backLinks: function () {
        return backLinks
      },
      compare: function (a, b) {
        if (edges[a][b] && !edges[b][a]) {
          return 1
        } else if (edges[b][a] && !edges[a][b]) {
          return -1
        } else if (edges[b][a] && edges[a][b]) {
          if (edges[b][a] > edges[a][b]) {
            return -1
          } else {
            return 1
          }
        } else {
          if ( _.some(backLinks[a]) && !_.some(backLinks[b]) || _.some(edges[b]) && !_.some(edges[a]) ) {
            return -1
          } else if ( !_.some(backLinks[a]) && _.some(backLinks[b]) || _.some(edges[a]) && !_.some(edges[a]) ) {
            return 1
          } else {
            return 0
          }
        }
      },
      order: function () {
        return shuffled
      },
      weights: function () {
        var ws = {}
        _.each(aspects, function (a) {
          ws[a] = methods.median('Health', a) / methods.sum('Health')
        })
        return ws
      },
      record: function (p, a, b, a_d, b_d, t) {
        choices.push({
          p: p,
          a: a,
          b: b,
          a_d: a_d,
          b_d: b_d,
          t: t
        })
      },
      finish: function () {
        User.record({
          aspects: aspects,
          responses: responses,
          choices: choices,
          weights: methods.weights(),
          date: Date.now()
        }).then(function () {
          $location.path('/history')
        })
      }
    }

    return methods
  })
  .factory('TestTradeoff', function (Tradeoff, Aspects) {
    var abc = _.sample(Aspects.twenty(), 3)
    var pairs = _.map(abc, function (aspect, i) {
      return [aspect, abc[(i + 1) % abc.length]]
    })

    var level = {}
    var positive = Math.random() > .5

    _.each(abc, function (aspect) {
      level[aspect] = Math.round( Math.max( Math.random() * 100, Math.random() * 100 ) )
    })

    var methods = {
      nextPair: function () {
        var pair = pairs.pop()
        var values = Tradeoff.values(level[pair[0]], level[pair[1]])
        while (values === 'skip' && pairs.length) {
          pair = pairs.pop()
          values = Tradeoff.values(level[pair[0]], level[pair[1]])
        }
        if (!pair) {
          return false
        } else {
          return [{
            name: pair[0],
            level: level[pair[0]]
          }, {
            name: pair[1],
            level: level[pair[1]]
          }]
        }
      }
    }
    return methods
  })