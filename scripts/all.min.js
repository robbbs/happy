angular.module('well', [
  'ngRoute',
  'firebase',
  'well.controllers',
  'well.filters',
  'well.services',
  'well.directives'
])
.config(function ($routeProvider, $locationProvider) {
  $routeProvider
    .when('/', {
      templateUrl: 'landing.html'
    })
    .when('/login', {
      templateUrl: 'login.html'
    })
    .when('/signup', {
      templateUrl: 'signup.html'
    })
    .when('/survey', {
      templateUrl: 'survey.html',
      controller: 'SurveyCtrl'
    })
    .when('/tradeoff', {
      templateUrl: 'tradeoff.html',
      controller: 'TradeOffCtrl'
    })
    .when('/SP', {
      templateUrl: 'sp.html',
      controller: 'SPCtrl'
    })
    .when('/SP/mrt', {
      templateUrl: 'spmrt.html',
      controller: 'MRTCtrl'
    })
    .when('/cycle', {
      templateUrl: 'cycle.html',
      controller: 'CycleCtrl'
    })
    .when('/tricycle', {
      templateUrl: 'tricycle.html',
      controller: 'TricycleCtrl'
    })
    .when('/history', {
      templateUrl: 'history.html',
      controller: 'HistoryCtrl'
    })
    .when('/test/:num', {
      templateUrl: 'history.html',
      controller: 'TestCtrl'
    })
    .when('/mrt/:concavity', {
      templateUrl: 'mrt.html',
      controller: 'mrt'
    })
    .when('/pie', {
      templateUrl: 'pie.html',    })
    .otherwise({
      redirectTo: '/'
    })

  // $locationProvider.html5Mode(true)
})

/* Services */

angular.module('well.services', [])
  .factory('User', function ($q, $rootScope, $firebaseSimpleLogin, $firebase) {
    var deferred = $q.defer()
    var auth = $firebaseSimpleLogin(new Firebase('https://well.firebaseio.com/')),
      history

    $rootScope.$on('$firebaseSimpleLogin:login', function(e, user) {
      console.log('User ' + user.id + ' successfully logged in!')
      history = $firebase(new Firebase('https://well.firebaseio.com/' + user.md5_hash))
      history.$on('loaded', function (values) {
        deferred.resolve()
      })
    })

    return {
      login: function (email, password) {
        return auth.$login('password', {
          email: email,
          password: password,
          rememberMe: true
        })
      },
      signup: function (email, password) {
        return auth.$createUser(email, password)
      },
      logout: function () {
        auth.$logout()
      },
      promise: function () {
        return deferred.promise
      },
      info: function () {
        return auth.user
      },
      history: function () {
        return history
      },
      record: function (data) {
        return history.$add(data)
      }
    }
  })
  .factory('Aspects', function () {
    var names = ['Health', 'Happiness', 'Freedom', 'Financial Security', 'Meaning & Value']
    var order = ['Health', 'Happiness', 'Freedom', 'Financial Security', 'Meaning & Value']
    var texts = {
      'Health': 'Your health (physical and mental)', 
      'Happiness': 'Your overall happiness', 
      'Freedom': 'Your freedom (political, religious, civil, of movement, of speech, etc.)', 
      'Financial Security': 'Your financial security', 
      'Meaning & Value': 'Your sense that your life is meaningful and has value'
    }
    return {
      names: function () {
        return names
      },
      texts: function () {
        return texts
      },
      getColor: function (aspect, level) {
        var h = (order.indexOf(aspect) + 6) * 70,
            l =  .99 + (level / 100) * -.24
        return d3.hsl(h, .8, l).toString()
      },
      mixColor: function (a1, a2, pref) {
        var p = (pref - 5) / 5
            h = p * ( (names.indexOf(a2) + 6) * 70 ) - p * ( (names.indexOf(a1) + 6) * 70 )
        return d3.hsl(h, .8, .8).toString()
      }
    }
  })
  .factory('Survey', function (Aspects) {
    var aspects = Aspects.names(),
      responses = {}

    for (var i in aspects) {
      responses[aspects[i]] = {}
      responses[aspects[i]].level = null
    }

    return {
      responses: function () {
        return responses
      },
      respond: function (aspect, level) {
        responses[aspect].level = level
      },
      responded: function () {
        return aspects.every(function (a) {
          return responses[a].level
        })
      },
      randomize: function () {
        for (var i in aspects) {
          responses[aspects[i]].level = Math.ceil(Math.random() * 99)
        }
        return responses
      }
    }
  })
  .factory('TradeOff', function (Aspects, Survey, User, $location) {
    var aspects = Aspects.names(),
      responses = Survey.responses(),
              n = 0,
              i = 1,
           left = JSON.parse(JSON.stringify(responses)),
          right = JSON.parse(JSON.stringify(responses)),
              a = left[aspects[n]],
              b = right[aspects[i]],
        choices = []

    function record (p) {
      choices.push({
        a: n,
        b: i,
        a_d: a.diff,
        b_d: b.diff,
        p: p,
        t: Date.now()
      })
    }

    function gcd (n, d) {
      if (d) {
        return gcd (d, n % d)
      } else {
        return Math.abs(n)
      }
    }

    function simplify (f) {
      var div = gcd(f[0], f[1])
      return [f[0] / div, f[1] / div]
    }

    function median (f1, f2) {
      var f = []
      f[0] = f1[0] * f2[1] + f2[0] * f1[1]
      f[1] = f1[1] * f2[1] * 2
      return simplify(f)
    }

    for (var k in responses) {
      responses[k].lower = null
      responses[k].upper = null
    }
    responses[aspects[n]].lower = [1, 1]
    responses[aspects[n]].upper = [1, 1]

    var service = {
      left: function () {
        return left
      },
      right: function () {
        return right
      },
      responses: function () {
        return responses
      },
      choose: function (p) {
        this.init(p)
      },
      choice: function () {
        return {
          numeraire: {
            name: aspects[n],
            diff: left[aspects[n]].diff
          },
          comparison: {
            name: aspects[i],
            diff: right[aspects[i]].diff
          }
        }
      },
      loadChoice: function () {
        if (!Survey.responded()) Survey.randomize()
        responses = Survey.responses()

        a = left[aspects[n]],
        b = right[aspects[i]]

        a.diff = b.diff = (100 - a.level > 4 && 100 - b.level > 4) ? 5 : Math.min(100 - a.level, 100 - b.level)
        
        this.choose = this.init
        return [left, right]
      },
      init: function (p) {
        record(p)
        if (p < 0) {
          responses[aspects[i]].upper = [1, 1]
          if (a.diff === 1) {
            responses[aspects[i]].lower = [0, 1]
            this.next()
          } else {
            a.diff = 1
            this.choose = function (p) {
              record(p)
              if (p < 0) {
                responses[aspects[i]].upper = simplify([1, b.diff])
                this.halve()
              } else {
                responses[aspects[i]].lower = simplify([1, b.diff])
                this.hone()
              }
              return [left, right]
            }
          }
        } else {
          responses[aspects[i]].lower = [1, 1]
          if (a.diff === 1) {
            responses[aspects[i]].upper = [1, 0]
            this.next()
          } else {
            b.diff = 1
            this.choose = function (p) {
              record(p)
              if (p < 0) {
                responses[aspects[i]].upper = simplify([a.diff, b.diff])
                this.hone()
              } else {
                responses[aspects[i]].lower = simplify([a.diff, b.diff])
                this.twice()
              }
              return [left, right]
            }
          }
        }
        return [left, right]
      },
      halve: function () {
        if (b.diff * 2 > 100 - b.level) {
          this.next()
        } else {
          b.diff *= 2
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = simplify([a.diff, b.diff])
              this.halve()
            } else {
              responses[aspects[i]].lower = simplify([a.diff, b.diff])
              this.next()
            }
            return [left, right]
          }
        }
      },
      twice: function () {
        if (a.diff * 2 > 100 - a.level) {
          next()
        } else {
          a.diff *= a
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = simplify([a, b])
              this.next()
            } else {
              responses[aspects[i]].lower = simplify([a, b])
              this.twice()
            }
            return [left, right]
          }
        }
      },
      hone: function () {
        var u = responses[aspects[i]].upper,
            l = responses[aspects[i]].lower,
           ab = median(l, u)

        ab[0] = Math.round(5 * ab[0] / ab[1])
        ab[1] = 5
        console.log(ab)

        if (simplify(ab)[0] === u[0] || simplify(ab)[0] === l[0]) {
          console.log('eh')
          this.next()
        } else {
          a.diff = ab[0]
          b.diff = ab[1]
          this.choose = function (p) {
            record(p)
            if (p < 0) {
              responses[aspects[i]].upper = ab
            } else {
              responses[aspects[i]].lower = ab
            }
            this.hone()
            return [left, right]
          }
        }
      },
      next: function () {
        b.diff = 0
        i += 1
        if (i === aspects.length) {
          this.finish()
        } else {
          this.loadChoice()
        }
      },
      finish: function () {
        User.record({
          aspects: aspects,
          responses: responses,
          choices: choices,
          date: Date.now()
        }).then(function () {
          $location.path('/history')
        })
      }
    }
    return service
  })
  .factory('SP', function(Aspects, Survey) {
    var aspects = Aspects.names(),
      texts = Aspects.texts(),
      responses = Survey.responded() ? Survey.responses() : Survey.randomize(),
      edges = [],
      choice = {}

    _.each(aspects, function (e, i) {
      edges.push( _.shuffle([(i + 1) % 5, i]) )
      edges.push( _.shuffle([(i + 3) % 5, i]) )
    })
    edges = _.shuffle(edges)

    return {
      edges: function () {
        return edges
      },
      nextChoice: function () {
        var next = edges.pop()
          a = aspects[next[0]],
          b = aspects[next[1]],
          left = JSON.parse(JSON.stringify(responses)),
          right = JSON.parse(JSON.stringify(responses))

        aspects.unshift(aspects.splice(aspects.indexOf(b), 1)[0], aspects.splice(aspects.indexOf(a), 1)[0])
        left[aspects[0]].diff = Math.min( Math.ceil(Math.random() * 5), 100 - responses[aspects[0]].level )
        right[aspects[1]].diff = Math.min( Math.ceil(Math.random() * 5), 100 - responses[aspects[1]].level )

        return [left, right]
      },
      mrt: function () {
        var next = edges.pop()
          a = aspects[next[0]],
          b = aspects[next[1]]

        return {
          a: {
            name: a,
            text: texts[a],
            level: responses[a].level
          },
          b: {
            name: b,
            text: texts[b],
            level: responses[b].level
          } 
        }
      }
    }
  })
  .factory('Cycle', function (Aspects, Survey) {
    var aspects = Aspects.names(),
      responses = Survey.responded() ? Survey.responses() : Survey.randomize(),
      edges = {},
      backLinks = {},
      edge = {},
      shuffled = _.shuffle(aspects),
      i = 0,
      j = 1

    _.each(aspects, function (e) {
      edge[e] = null
    })

    _.each(aspects, function (e, i) {
      edges[e] = _.clone(edge)
    })

    _.each(aspects, function (e, i) {
      backLinks[e] = _.clone(edge)
    })

    var methods = {
      responses: function () {
        return responses
      },
      nextChoice: function () {
        if (edges[shuffled[i]][shuffled[j]]) {
          i += 1
          j = (j + 1) % 5
        }
        console.log(i, j)
        if (i === 5) {
          return false
        } else {
          var a_d = b_d = Math.min( Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level), 5)
          if (edges[shuffled[j]][shuffled[i]]) {
            b_d = edges[shuffled[j]][shuffled[i]] * 2 * a_d
            if (b_d > 100 - responses[shuffled[j]].level) {
              b_d = 100 - responses[shuffled[j]].level
              a_d = b_d / (edges[shuffled[j]][shuffled[i]] * 2)
            }
          }
          return {
            a: {
              name: shuffled[i],
              level: responses[shuffled[i]].level,
              diff: a_d
            }, 
            b: {
              name: shuffled[j],
              level: responses[shuffled[j]].level,
              diff: b_d
            }
          }
        }

      },
      getMin: function (a, b) {
        c = shuffled[(shuffled.indexOf(a) + 1) % 5]
        if (a === b) {
          return 1
        } else if (edges[a][b]) {
          return edges[a][b]
        } else if (i < 5) {
          return 'X'
        } else {
          return edges[a][c] * methods.getMin(c, b)
        }
      },
      getMax: function (a, b) {
        return 1 / methods.getMin(b, a)
      },
      inAndOut: function (a) {
        return _.some(edges[a]) && _.some(backLinks[a])
      },
      complete: function () {
        return _.every(aspects, function (a) {
          return methods.inAndOut(a)
        })
      },
      path: function (a, b, d) {
        edges[a][b] = d
        backLinks[b][a] = 1 / d
      },
      forwardLinks: function () {
        return edges
      },
      backLinks: function () {
        return backLinks
      },
      compare: function (a, b) {
        if (edges[a][b] && !edges[b][a]) {
          return 1
        } else if (edges[b][a] && !edges[a][b]) {
          return -1
        } else if (edges[b][a] && edges[a][b]) {
          if (edges[b][a] > edges[a][b]) {
            return -1
          } else {
            return 1
          }
        } else {
          if ( _.some(backLinks[a]) && !_.some(backLinks[b]) || _.some(edges[b]) && !_.some(edges[a]) ) {
            return -1
          } else if ( !_.some(backLinks[a]) && _.some(backLinks[b]) || _.some(edges[a]) && !_.some(edges[a]) ) {
            return 1
          } else {
            return 0
          }
        }
      },
      order: function () {
        return shuffled
      }
    }

    return methods
  })
  .factory('Tricycle', function (Aspects, Survey, User, $location) {
    var aspects = Aspects.names(),
      responses = Survey.responded() ? Survey.responses() : Survey.randomize(),
      edges = {},
      backLinks = {},
      edge = {},
      shuffled = _.shuffle(aspects),
      i = 0,
      j = 1,
      choices = []

    _.each(aspects, function (e) {
      edge[e] = null
    })

    _.each(aspects, function (e, i) {
      edges[e] = _.clone(edge)
    })

    _.each(aspects, function (e, i) {
      backLinks[e] = _.clone(edge)
    })

    var methods = {
      responses: function () {
        return responses
      },
      nextChoice: function () {
        var factor = null
        if (j === (i + 2) % 5) {
          if (edges[shuffled[j]][shuffled[i]]) {
            i += 1
          } else if (edges[shuffled[i]][shuffled[j]]) {
            factor = 'double'
          }
        } else if (j === (i + 1) % 5) {
          if (edges[shuffled[i]][shuffled[j]]) {
            j = (j + 1) % 5
          } else if (edges[shuffled[j]][shuffled[i]]) {
            factor = 'halve'
          }
        }

        console.log(i, j, factor)

        if (i === 5) {
          return false
        } else {
          var a_d = b_d = Math.min( Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level), 5)

          if (factor === 'halve') {
            b_d = edges[shuffled[j]][shuffled[i]] * 2 * a_d
            if (b_d > 100 - responses[shuffled[j]].level) {
              b_d = 100 - responses[shuffled[j]].level
              a_d = b_d / (edges[shuffled[j]][shuffled[i]] * 2)
              if (b_d > 100 - responses[shuffled[j]].level) {
                b_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                a_d = b_d / (edges[shuffled[j]][shuffled[i]] * 2)
              }
            }
          } 

          else if (factor === 'double') {
            a_d = edges[shuffled[i]][shuffled[j]] * 2 * b_d
            if (a_d > 100 - responses[shuffled[i]].level) {
              a_d = 100 - responses[shuffled[j]].level
              b_d = a_d / (edges[shuffled[i]][shuffled[j]] * 2)
              if (a_d > 100 - responses[shuffled[i]].level) {
                a_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                b_d = a_d / (edges[shuffled[i]][shuffled[j]] * 2)
              }
            }
          }

          else if (j === (i + 1) % 5 && edges[shuffled[(i + 1) % 5]][shuffled[(i - 1) % 5]] && edges[shuffled[(i - 1) % 5]][shuffled[i]]) {
            console.log('predicted')
            var prediction = edges[shuffled[(i + 1) % 5]][shuffled[(i - 1) % 5]] * edges[shuffled[(i - 1) % 5]][shuffled[i]]
            b_d = prediction * 2 * a_d
            if (b_d > 100 - responses[shuffled[j]].level) {
              a_d = 100 - responses[shuffled[i]].level
              b_d = a_d / prediction * 2
              if (b_d > 100 - responses[shuffled[j]].level) {
                a_d = Math.min(100 - responses[shuffled[i]].level, 100 - responses[shuffled[j]].level)
                b_d = a_d / prediction * 2
              }
            }
          }

          return {
            a: {
              name: shuffled[i],
              level: responses[shuffled[i]].level,
              diff: a_d
            }, 
            b: {
              name: shuffled[j],
              level: responses[shuffled[j]].level,
              diff: b_d
            }
          }
        }

      },
      getMin: function (a, b) {
        c = shuffled[(shuffled.indexOf(a) + 1) % 5]
        if (a === b) {
          return 1
        } else if (edges[a][b]) {
          return edges[a][b]
        } else if (i < 5) {
          return 'X'
        } else {
          return edges[a][c] * methods.getMin(c, b)
        }
      },
      getMax: function (a, b) {
        return 1 / methods.getMin(b, a)
      },
      median: function (a, b) {
        return (methods.getMin(a, b) + methods.getMax(a, b)) / 2
      },
      sum: function (a) {
        var s = 0
        _.each(aspects, function (b) {
          s += methods.median(a, b)
        })
        return s
      },
      path: function (a, b, d) {
        edges[a][b] = d
        backLinks[b][a] = 1 / d
      },
      forwardLinks: function () {
        return edges
      },
      backLinks: function () {
        return backLinks
      },
      compare: function (a, b) {
        if (edges[a][b] && !edges[b][a]) {
          return 1
        } else if (edges[b][a] && !edges[a][b]) {
          return -1
        } else if (edges[b][a] && edges[a][b]) {
          if (edges[b][a] > edges[a][b]) {
            return -1
          } else {
            return 1
          }
        } else {
          if ( _.some(backLinks[a]) && !_.some(backLinks[b]) || _.some(edges[b]) && !_.some(edges[a]) ) {
            return -1
          } else if ( !_.some(backLinks[a]) && _.some(backLinks[b]) || _.some(edges[a]) && !_.some(edges[a]) ) {
            return 1
          } else {
            return 0
          }
        }
      },
      order: function () {
        return shuffled
      },
      weights: function () {
        var ws = {}
        _.each(aspects, function (a) {
          ws[a] = methods.median('Health', a) / methods.sum('Health')
        })
        return ws
      },
      record: function (p, a, b, a_d, b_d, t) {
        choices.push({
          p: p,
          a: a,
          b: b,
          a_d: a_d,
          b_d: b_d,
          t: t
        })
      },
      finish: function () {
        User.record({
          aspects: aspects,
          responses: responses,
          choices: choices,
          weights: methods.weights(),
          date: Date.now()
        }).then(function () {
          $location.path('/history')
        })
      }
    }

    return methods
  })
  .factory('Style', function($window) {
    var sheet = (function() {
      var style = document.createElement('style')

      // Add a media (and/or media query) here if you'd like!
      // style.setAttribute("media", "screen")
      // style.setAttribute("media", "@media only screen and (max-width : 1024px)")

      // WebKit hack :(
      style.appendChild(document.createTextNode(''))

      document.head.appendChild(style)

      return style.sheet
    })()

    return function (selector, rules, index) {
      if (sheet.insertRule) {
        sheet.insertRule(selector + "{" + rules + "}", index);
      } else {
        sheet.addRule(selector, rules, index);
      }
    }
  })
/* Controllers */

angular.module('well.controllers', [])
  .controller('AppCtrl', function ($scope, User, $location, Aspects, Survey) {

    $scope.splash = {
      url: 'welcome.html'
    }

    $scope.user = User

    $scope.login = {
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password'
      },
      submit: function() {
        User.login(this.email, this.password).then(function(user) {
          $scope.login.wrong = 'in'
          console.log('Logged in as: ', user.uid);
          $location.path('/survey')
        }, function(error) {
          $scope.login.wrong = error.code
          if (error.code === 'INVALID_EMAIL') {
            $scope.login.email = ''
            $scope.login.placeholder.email = 'Enter a valid email'
          } else if (error.code === 'INVALID_PASSWORD') {
            $scope.login.password = ''
            $scope.login.placeholder.password = 'Enter a valid password'
          }
          console.error('Login failed: ', error);
        })
      }
    }

    $scope.signup = {
      enabled: false,
      wrong: false,
      placeholder: {
        email: 'Enter your email',
        password: 'Password',
        confirm: 'Confirm password'
      },
      init: function () {
        $scope.signup.enabled = true
        $scope.signup.email = $scope.login.email
        $scope.signup.password = $scope.login.password
        $scope.signup.submit()
      },
      submit: function() {
        if ($scope.signup.password === $scope.signup.confirm) {
          User.signup($scope.signup.email, $scope.signup.password)
          .then(function(user) {
            $scope.signup.wrong = 'in'
            console.log('Logged in as: ', user.uid);
            $location.path('/survey')
          }, function(error) {
            $scope.signup.wrong = error.code
            if (error.code === 'INVALID_EMAIL') {
              $scope.signup.email = ''
              $scope.signup.placeholder.email = 'Enter a valid email'
            } else if (error.code === 'INVALID_PASSWORD') {
              $scope.signup.password = ''
              $scope.signup.placeholder.password = 'Enter a valid password'
            } else if (error.code === 'EMAIL_TAKEN') {
              $scope.signup.false = true
              alert('The specified email address is already in use.')
            }
            console.error('Sign up failed: ', error);
          })
        } else {
          $scope.signup.wrong = 'mismatch'
          $scope.signup.confirm = ''
        }
      }
    }

    $scope.settings = {
      devmode: false
    }

    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    } 
    $scope.responses = {}
    _.each($scope.aspects.names, function (a) {
      $scope.responses[a] = {
        level: null
      }
    })
  })
  .controller('SurveyCtrl', function ($scope, Aspects, Survey, Style, $location) {
    $scope.aspects = Aspects.names()
    $scope.survey = {
      finished: false
    }
  })
  .controller('TradeOffCtrl', function ($scope, Aspects, TradeOff) {
    $scope.aspects = Aspects.names()

    $scope.responses = TradeOff.responses()
    var choice = TradeOff.loadChoice()
    $scope.left = choice[0]
    $scope.right = choice[1]

    $scope.choice = TradeOff.choice()
    $scope.$watch('left', function () {
      $scope.choice = TradeOff.choice()
    }, true)
    $scope.$watch('right', function () {
      $scope.choice = TradeOff.choice()
    }, true)

    $scope.choose = function (p) {
      choice = TradeOff.choose(p)
      $scope.left = choice[0]
      $scope.right = choice[1]

      var neu = d3.select('.options').style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')


      old.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
          })

      neu.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }

    $scope.prefs = {
      degree: null,
      range: [null, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5],
      next: function () {
        console.log(this.degree)
        $scope.choose(this.degree)
        this.degree = 0
      }
    }
  })
  .controller('HistoryCtrl', function ($scope, User) {
    $scope.data = null
    User.promise().then(function () {
      var history = User.history()
      var keys = history.$getIndex()
      var data = [], weights = []
      for (var i in keys) {
        var responses = history[keys[i]].responses
        var aspects = history[keys[i]].aspects
        var datum = {
          date: history[keys[i]].date
        }
        aspects.forEach(function (a) {
          var weight = 1
          if (responses[a].lower && responses[a].upper) {
            weight = (responses[a].lower[0] * responses[a].upper[1] + responses[a].lower[1] * responses[a].upper[0]) / (responses[a].lower[1] * responses[a].upper[1] * 2)
          } 
          datum[a] = {
            value: responses[a].level,
            weight: weight
          }
          if (weights[a]) {
            weights[a] += weight
          } else {
            weights[a] = weight
          }
        })
        data.push(datum)
      }

      var sum = 0
      for (var a in weights) {
        sum += weights[a]
      }
      for (var a in weights) {
        weights[a] /= sum
      }
      data.forEach(function (e) {
        for (var a in e) {
          e[a].weight = weights[a]
        }
      })
      $scope.data = data
    })
  })
  .controller('TestCtrl', function ($scope, $routeParams) {
    var data = []
    for (var i = 0; i < Number($routeParams.num); i += 1) {
      var date = (new Date('January 1 2012')).getTime() + Math.round(30 * (i + Math.random())) * 86400000
      data.push({
        'Health': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Happiness': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Freedom': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Financial Security': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        'Meaning/Value': {
          value: Math.round(Math.max(Math.random() * 100, Math.random() * 100))
        },
        date: date
      })
    }
    console.log(data)
    var logNormal = d3.random.logNormal()

    var weights = [1, logNormal(), logNormal(), logNormal(), logNormal()]
    var w_sum = weights.reduce(function (a, b) {
      return a + b
    })
    weights = weights.map(function (d) {
      return d / w_sum
    })

    var w = {
      'Health': weights[0],
      'Happiness': weights[1],
      'Freedom': weights[2],
      'Financial Security': weights[3],
      'Meaning/Value': weights[4]
    }

    var weights = d3.range(data.length).map(function () {
      return w
    })

    var labelVar = 'date'
    var varNames = d3.keys(data[0])
      .filter(function (key) { return key !== labelVar;});

    data.forEach(function (e, i, a) {
      varNames.forEach(function (name) {
        e[name].weight = weights[i][name]
      })
    })

  $scope.data = data
  })
  .controller('mrt', function ($scope, $routeParams) {
    $scope.mrt = {
      a : {
        name: 'Freedom',
        level: 73,
        diff: 0,
        change: 0
      },
      b : {
        name: 'Health',
        level: 92,
        diff: 0,
        change: 0
      }
    }

    $scope.$watch('mrt', function () {
      $scope.mrt.a.diff = $scope.mrt.a.change
      if ($routeParams.concavity === 'constant') {
        var d = 100 - ($scope.mrt.b.level - (2 * $scope.mrt.a.diff))
        if (d < 0) {
          $scope.mrt.a.diff = -(100 - $scope.mrt.b.level) / 2
        } else if (d > 100) {
          $scope.mrt.a.diff = $scope.mrt.b.level / 2
        }
        $scope.mrt.b.diff = -2 * $scope.mrt.a.diff
      } else {
        var square = $scope.mrt.a.change < 0 ? Math.round(Math.sqrt(-$scope.mrt.a.change)) : -Math.pow($scope.mrt.a.change, 2)
        var d = $scope.mrt.b.level + square
        if (d < 0) {
          $scope.mrt.a.diff = Math.floor(Math.sqrt($scope.mrt.b.level))
        } else if (d > 100) {
          $scope.mrt.a.diff = -Math.pow(100 - $scope.mrt.b.level, 2)
        }
        $scope.mrt.b.diff = $scope.mrt.a.diff < 0 ? Math.round(Math.sqrt(-$scope.mrt.a.diff)) : -Math.pow($scope.mrt.a.diff, 2)
      }
    }, true)
  })
  .controller('SPCtrl', function ($scope, Aspects, SP, Survey) {
    $scope.aspects =  {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    var choices = SP.nextChoice()

    $scope.left = choices[0]
    $scope.right = choices[1]

    $scope.choose = function (p) {
      var lr = SP.nextChoice()
      $scope.left = lr[0]
      $scope.right = lr[1]
      $scope.aspects.names 

      var neu = d3.select('.options').style('opacity', '0')
      var w = neu.style('width')

      var old = neu.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this) })
          .style('opacity', '1')


      old.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '0')
          .each('end', function () {
            old.remove()
          })

      neu.transition()
          .duration(1000)
          .style('left', '-' + w)
          .style('opacity', '1')
          .each('end', function () {
            neu.style('left', '0px')
          })
    }

    $scope.prefs = {
      degree: null,
      range: [null, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5],
      next: function () {
        console.log(this.degree)
        $scope.choose(this.degree)
        this.degree = 0
      }
    }


  })
  .controller('CycleCtrl', function ($scope, Cycle, Aspects) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    $scope.responses = Cycle.responses()
    $scope.choice = Cycle.nextChoice()
    $scope.getMax = Cycle.getMax
    $scope.getMin = Cycle.getMin
    
    $scope.choose = function (a, b, d) {
      Cycle.path(a, b, d)
      $scope.choice = Cycle.nextChoice()
      $scope.edges = {
        forward: Cycle.forwardLinks(),
        back: Cycle.backLinks()
      }
      $scope.order = Cycle.order()
    }

    $scope.edges = {
      forward: Cycle.forwardLinks(),
      back: Cycle.backLinks()
    }
  })
  .controller('TricycleCtrl', function ($scope, Tricycle, Aspects) {
    $scope.aspects = {
      names: Aspects.names(),
      texts: Aspects.texts()
    }

    $scope.responses = Tricycle.responses()
    $scope.choice = Tricycle.nextChoice()
    $scope.getMax = Tricycle.getMax
    $scope.getMin = Tricycle.getMin
    $scope.median = Tricycle.median
    $scope.sum = Tricycle.sum
    $scope.weights = function () {
      if (!$scope.choice) {
        return Tricycle.weights()
      }
    }
    $scope.order = Tricycle.order()
    
    $scope.choose = function (p, a, b, a_d, b_d) {
      Tricycle.record(p, a, b, a_d, b_d, Date.now())
      if (p === a) {
        Tricycle.path(b, a, b_d / a_d)
      } else {
        Tricycle.path(a, b, a_d / b_d)
      }
      $scope.choice = Tricycle.nextChoice()
      $scope.edges = {
        forward: Tricycle.forwardLinks(),
        back: Tricycle.backLinks()
      }
    }

    $scope.edges = {
      forward: Tricycle.forwardLinks(),
      back: Tricycle.backLinks()
    }
  })
  .controller('MRTCtrl', function ($scope, SP) {
    $scope.choice = SP.mrt()

    $scope.$watch('choice', function () {
      if (!isNaN($scope.choice.a.change)) {
        $scope.choice.a.diff = $scope.choice.a.change
        var d = 100 - ($scope.choice.b.level - (2 * $scope.choice.a.diff))
        if (d < 0) {
          $scope.choice.a.diff = Math.floor((100 - $scope.choice.b.level) / -2)
        } else if (d > 100) {
          $scope.choice.a.diff = Math.floor(($scope.choice.b.level) / 2)
        }
        $scope.choice.b.diff = -2 * $scope.choice.a.diff
      }
    }, true)
  })
/* Filters */

angular.module('well.filters', []).
  filter('round2', function () {
    return function (n) {
      return Number(n).toFixed(2)
    }
  })

/* Directives */

angular.module('well.directives', [])
  .directive('slider', function($window, $timeout, Aspects, Survey, TradeOff) {
    return {
      restrict: 'EA',
      scope: {
        fixed: '@',
        finished: '='
      },
      template: '<h5><span>{{ text }}:</span><span class="pull-right">{{ level + diff }}</span></h5><div class="svg" ng-class="{ unfilled: level === null }"></div>',
      link: function(scope, element, attrs) {
        attrs.$observe('name', function (name) {
          scope.text = Aspects.texts()[name]
          scope.level = Survey.responses()[name].level
          scope.name = name
        })

        attrs.$observe('diff', function (diff) {
          if (diff) {
            scope.diff = Number(diff)
          } else {
            scope.diff = null
          }
          scope.render()
        })

        var svg = d3.select(element[0].children[1])
          .append('svg')
          .style('width', '100%')

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 20, bottom: 0, left: 10},
              width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              height = scope.fixed ? 30 : 60

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])
              .clamp(true)

          var brush = d3.svg.brush()
              .x(x)
              .extent([scope.level, scope.level])
              .on('brush', brushed)

          var g = svg
              .attr('width', width)
              .attr('height', height)
            .append('g')
              .attr('transform', 'translate(0,0)')

          var axis = g.append('g')
              .attr('class', 'axis')
              .attr('transform', 'translate(0,' + (height - 20) + ')')

          // axis.append('text')
          //     .text(1)
          //     .attr('x', x(1))
          //     .attr('y', 12)
          //     .attr('dy', '.71em')
          //     .style('text-anchor', 'middle')


          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickPadding(12))
          
          var domain = axis.select('.domain')
              .attr('transform', 'translate(0,' + (30 - height) + ')')

          if (!scope.fixed) {
            domain.select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
              .attr('class', 'halo')
          } else {
            domain.remove()
          }

          var slider = g.append('g')
              .attr('class', 'slider')
              .call(brush)

          slider.selectAll('.extent,.resize')
              .remove()

          slider.select('.background')
              .attr('height', height)

          var barBack = g.append('rect')
              .attr('x', x(0))
              .attr('y', (height - 34))
              .attr('height', 20)
              .attr('width', x(100) - x(0))
              .style('fill', Aspects.getColor(scope.name, 10))

          var bar = g.append('rect')
              .attr('x', x(0))
              .attr('y', (height - 34))
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 100))

          var rect = g.append('rect')
              .attr('x', x(0))
              .attr('y', (height - 34))
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 205))

          var text = g.append('text')
              .attr('dy', 11)
              .style('fill', '#000')
              .style('font-weight', '400')

          var pointy = function () {
            var cx = x(1),
              cy = 10
            return {
              set: function (pt) {
                cx = pt
                return [
                  { x: cx - 6, y: cy - 6 },
                  { x: cx + 6, y: cy - 6 },
                  { x: cx + 6, y: cy + 6 },
                  { x: cx, y: cy + 10 },
                  { x: cx - 6, y: cy + 6 }
                ]
              }

            }
          }

          var line = d3.svg.line()
            .x(function (d) { return d.x })
            .y(function (d) { return d.y })

          if (!scope.fixed) {
            var handle = slider.append('path')
              .attr('class', 'handle')
              .attr('d', line(pointy().set(x(10))) + 'Z')
          }

          slider
              .call(brush.event)
            .transition() // gratuitous intro!
              .duration(250)
              .call(brush.extent([scope.level, scope.level]))
              // .call(brush.event)

          function brushed() {
            var value = brush.extent()[0]

            if (d3.event.sourceEvent) {
              var v = x.invert(d3.mouse(this)[0])
              value = isNaN(v) ? value : v
              brush.extent([value, value])
            }

            if (value) value = Math.round(value)

            if (!scope.fixed) handle.attr('d', line( pointy().set( x(value) ) ) + 'Z')
            bar.attr('width', x(value) - x(0))

            $timeout(function () {
              scope.level = value
              Survey.respond(scope.name, scope.level)
              if (Survey.responded()) {
                scope.finished = true
              }
            })

            if (scope.diff && scope.level) {
              bar.attr('width', x(scope.level) - x(0))
              rect
                  .attr('x', x(scope.level))
                .transition()
                  .duration(250)
                  .attr('width', x(scope.diff))

              text.text('+' + scope.diff)

              text
                .attr('x', x(scope.level) + x(scope.diff))
                .attr('dx',  4)
            } else if (scope.level) {
              bar.attr('width', x(scope.level) - x(0))

              text
                .attr('x', x(scope.level))
                .attr('dx',  4)
            }
          }
        }
      }
    }
  })
  .directive('earth', function ($timeout, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        responses: '='
      },
      link: function (scope, element, attrs) {
        var splash = d3.select('.splash')

        var width = splash.style('width').replace('px',''),
            height = splash.style('height').replace('px','')

        var projection = d3.geo.orthographic()
            .precision(0)
            .scale(600)
            .translate([width / 2, height / 2])
            .clipAngle(180)

        var canvas = d3.select('.splash .earth').append('canvas')
            .attr('width', width)
            .attr('height', height)

        var context = canvas.node().getContext('2d')

        var path = d3.geo.path()
            .projection(projection)
            .context(context)

        var delta = 0
        var offset = 0
        var ln = d3.random.logNormal(1)
        _.each(scope.responses, function (resp) {
          resp.rand = Math.random() * 20 + 10
        })

        d3.json('world-110m.json', function(error, world) {
          window.onscroll = function () {
            var delta = ((window.pageYOffset || document.scrollTop)  - (document.clientTop || 0) || 0) - offset
            offset = offset + delta
            rotate(offset)


            $timeout(function () {
              _.each(scope.responses, function (resp) {
                resp.level = Math.max( Math.min(100, offset / resp.rand), 0 )
              })
            })
          }
          var land = topojson.feature(world, world.objects.land)
          var countries = topojson.feature(world, world.objects.countries).features

          _.each(countries, function (country) {
            country.properties.color = Math.random() * 100
          })
          rotate()

          function rotate (d) {
            projection.rotate([d * .1, 0, 30])
            context.clearRect(0, 0, width, height)

            _.each(countries, function (country) {
              context.beginPath()
              context.strokeStyle = d3.hsl((++country.properties.color), 1, .8).toString()
              path(country)
              context.stroke()
            })

            if (d > window.innerHeight - 200) {
              d3.select('.foot.back')
                .style({
                  'position': 'fixed',
                  'top': '100px',
                  'margin-top': '0'
                })
            } else {
              d3.select('.foot.back')
                .style({
                  'position': 'absolute',
                  'top': '100%',
                  'margin-top': '-102px'
                })
            }

            if (d > window.innerHeight - 100) {
              d3.select('.row.logo')
                .style({
                  'position': 'fixed',
                  'width': 'inherit',
                  'top': '0'
                })
              // d3.select('.row.logo h1')
              //   .style({
              //     'color': '#fff'
              //   })
              d3.select('.row.welcome')
                .style({
                  'position': 'fixed',
                  'width': 'inherit',
                  'top': '100px'
                })

            } else {
              d3.select('.row.logo')
                .style({
                  'position': 'relative',
                  'width': 'auto'
                })
              // d3.select('.row.logo h1')
              //   .style({
              //     'color': '#559',
              //   })
              d3.select('.row.welcome')
                .style({
                  'position': 'relative',
                  'width': 'auto',
                  'top': '0'
                })
            }
          }

        })
      }
    }
  })
  .directive('plot', function ($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        data: '=',
        weighted: '&'
      },
      link: function (scope, element, attrs) {
        var svg = d3.select(element[0]).append('svg')
            .style('width', '100%')
            .style('height', '500px')
            .style('padding', '20px')
          .append('g')


        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          if (scope.data) scope.render(data)
        })

        scope.$watch('data', function (data) {
          var d = scope.data
          if (d) scope.render(d)
        }, true)

        var percent = d3.format('%')

        var single = function () {
          data.push(JSON.parse(JSON.stringify(data[0])))
          data[0].date = 0
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 40,
              height = 500

          var x = d3.time.scale()
              .domain([data[0].date, data[data.length - 1].date])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - 40, 0]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0); })
              .y1(function (d) { return y(d.y0 + d.y); });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]}
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight  });
            });
          });

          stack(seriesArr);

          y.domain([0, d3.max(seriesArr, function (c) { 
              return d3.max(c.values, function (d) { return d.y0 + d.y; });
            })]);

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("d", function (d) { return area(d.values); })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99); })
            // .style('fill-opacity', '0.3')
            .style("stroke", '#fff');

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dy', -16)
            .attr('dx', -10)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.append('text')
            .text(function () {
              var sum = 0
              for (var i in varNames) {
                sum += data[0][varNames[i]].value * data[0][varNames[i]].weight
              }
              return Math.round(sum)
            })
            .attr('text-anchor', 'start')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', height)
            .attr('dx', 10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          svg.selectAll('.label')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })

           svg.selectAll('.weight')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
              .attr('dy', '1em')

          svg.selectAll('.value')
            .data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.values[0].value })
              .attr('class', 'value')
              .attr('text-anchor', 'start')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', 10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) })
        }

        var multi = function () {
          var duration = data[data.length - 1].date - data[0].date
          data.unshift(JSON.parse(JSON.stringify(data[0])))
          data.push(JSON.parse(JSON.stringify(data[data.length - 1])))
          data[0].date = data[0].date - duration * 0.03
          data[data.length - 1].date = data[data.length - 1].date + duration * 0.03
          svg.selectAll('*').remove()

          var margin = {top: 0, right: 0, bottom: 0, left: 0},
              // width = d3.select(element[0])[0][0].offsetWidth - svg.style('padding-left').split('px')[0] - svg.style('padding-right').split('px')[0],
              width = d3.select('svg').style('width').replace('px','') - 60,
              height = 500

          var dates = data.map(function (d) {
            return d.date
          })

          var x = d3.time.scale()
              .domain([dates[0], dates[data.length - 1]])
              .rangeRound([120, width]);

          var y = d3.scale.linear()
              .rangeRound([height - ((varNames.length ) * (varNames.length - 1) * 2.5), 20]);

          var stack = d3.layout.stack()
              .offset('zero')
              .values(function (d) { return d.values; })
              .order('reverse')
              .x(function (d) { return x(d.label) })
              .y(function (d) { return d.weight * d.value });

          var area = d3.svg.area()
              .interpolate('monotone')
              .x(function (d) { return x(d.label) })
              .y0(function (d) { return y(d.y0) + varNames.indexOf(d.name) * 2 })
              .y1(function (d) { return y(d.y0 + d.y) + varNames.indexOf(d.name) * 2 });

          var color = d3.scale.ordinal()
              .range(d3.range(5).map(function(d) { return d3.hsl((d + 1) * 70,.8,.8).toString() }));

          color.domain(varNames);

          var seriesArr = [], series = {};
          varNames.forEach(function (name) {
            series[name] = {name: name, values:[]};
            seriesArr.push(series[name]);
          });

          data.forEach(function (d) {
            varNames.map(function (name) {
              series[name].values.push({label: d[labelVar], value: +d[name].value, weight: +d[name].weight, name: name });
            });
          });

          stack(seriesArr)

          maxY = d3.max(seriesArr, function (c) { 
            return d3.max(c.values, function (d) { return d.y0 + d.y; });
          })
          y.domain([0, maxY]);

          var back = svg.selectAll()
            .data(seriesArr)
            .enter().append('g')

          back.append("path")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style("fill", function (d) { return Aspects.getColor(d.name, 99) })
            .style("stroke", '#fff')

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return d.name })
              .style('font-weight', 'bold')
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })

          svg.selectAll().data(seriesArr)
            .enter().append('text')
              .text(function (d) { return percent(d.values[0].weight) })
              .attr('text-anchor', 'end')
              .attr('x', function (d) { return x(d.values[0].label) })
              .attr('dx', -10)
              .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '1em')

          var selection = svg.selectAll(".series")
            .data(seriesArr)
            .enter().append("g")
              .attr("class", "series");

          selection.append("path")
            .attr("class", "streamPath")
            .attr('id', function (d) { return d.name })
            .attr("d", function (d) { return area(d.values) })
            .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return -100 })
          //   .attr('y', function (d) { return y(d.values[0].y0 + d.values[0].y) + varNames.indexOf(d.name) * 2 })
          //   .attr('height', function (d) { return y(d.values[0].y0) - y(d.values[0].y0 + d.values[0].y) })
          //   .attr('width', function (d) { return x(d.values[0].label) + 100 })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          // selection.append('rect')
          //   .attr('x', function (d) { return x(d.values[d.values.length - 1].label) })
          //   .attr('y', function (d) { return y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) + varNames.indexOf(d.name) * 2  })
          //   .attr('width', 40)
          //   .attr('height', function (d) { return y(d.values[d.values.length - 1].y0) - y(d.values[d.values.length - 1].y0 + d.values[d.values.length - 1].y) })
          //   .style('fill', function (d) { return Aspects.getColor(d.name, 60) })

          selection.append('text')
            .text(function (d) { return d.name })
            .style('font-weight', 'bold')
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2  })
            .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          selection.append('text')
            .text(function (d) { return percent(d.values[0].weight) })
            .attr('class', 'roll')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(d.values[0].label) })
            .attr('dx', -10)
            .attr('y', function (d) { return y(d.values[0].y0 + (d.values[0].y / 2) ) + varNames.indexOf(d.name) * 2 })
            .attr('dy', '1em')

          svg.append('text')
            .text('Well-Being Index')
            .attr('text-anchor', 'end')
            .attr('x', function (d) { return x(seriesArr[0].values[0].label) })
            .attr('y', function (d) { return y(seriesArr[0].values[0].y0 + seriesArr[0].values[0].y ) })
            .attr('dx', -10)
            .attr('dy', -16)
            .style('font-weight', 'bold')
            .style('text-decoration', 'underline')

          var values = selection.append('g')

          data.pop()
          data.shift()

          values.selectAll('text').
            data(function (d) {
              d.values.pop()
              d.values.shift()
              return d.values
            })
            .enter().append('text')
              .attr('class', function (d) {
                return 'value d' + d.label
              })
              .text(function (d) { return d.value })
              .style('font-weight', 'bold')
              .attr('x', function (d) { return x(d.label) })
              .attr('y', function (d) { return y(d.y0 + (d.y / 2)) + varNames.indexOf(d.name) * 2  })
              .attr('dy', '7')
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.label === dates[0]) return 'end'
              //   else if (d.label === dates[dates.length - 1]) return 'start'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.label === dates[0]) return -5
              //   else if (d.label === dates[dates.length - 1]) return 5
              //   else return 0             
              // })
              .attr('fill', function (d) { return Aspects.getColor(d.name, 300) })

          var sums = svg.selectAll()
              .data(data)
            .enter().append('g').attr('class', function (d) {
              return 'day d' + d.date
            })

          sums.append('rect')
              .attr('class', function (d) { return 'd' + d.date })
              .attr('x', function (d) { return x(d.date) - 20})
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum) - 40
              })
              .attr('width', 40)
              .attr('height', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return height - y(sum)
              })

          sums.append('text')
              .text(function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return Math.round(sum)
              })
              .attr('x', function (d) { return x(d.date) })
              .attr('y', function (d) {
                var sum = 0
                for (var i in varNames) {
                  sum += d[varNames[i]].value * d[varNames[i]].weight
                }
                return y(sum)
              })
              .attr('text-anchor', 'middle')
              // .attr('text-anchor', function (d) { 
              //   if (d.date === dates[0]) return 'start'
              //   else if (d.date === dates[dates.length - 1]) return 'end'
              //   else return 'middle'
              // })
              // .attr('dx', function (d) {
              //   if (d.date === dates[0]) return 10
              //   else if (d.date === dates[dates.length - 1]) return -10
              //   else return 0             
              // })
              .attr('dy', '-1.25em')
              .style('font-weight', 'bold')
              .style('text-decoration', 'underline')

          dates.pop()
          dates.shift()

          dates.forEach(function (date) {
            var day = d3.selectAll('.d' + date)
            day.on('mouseover', function () {
              day.classed('highlight', true)
            })
            day.on('mouseout', function () {
              day.classed('highlight', false)
            })
          })

          var xAxis = d3.svg.axis()
            .scale(x)
            .tickValues(dates.map(function (d) {
              return new Date(d)
            }))
            .tickFormat(d3.time.format('%b %d'))
            .orient("bottom")

          var axis = svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + (height - 40) + ")")
              .call(xAxis)
        }

        var labelVar = 'date'
        var data, varNames
        scope.render = function () {
          data = angular.copy(scope.data)
          varNames = d3.keys(data[0])
            .filter(function (key) { return key !== labelVar;})
          if (data.length > 1) {
            multi()
          } else {
            single()
          }
        }
      }
    }
  })
  .directive('range', function($window, $timeout, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        level: '=',
        change: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 22)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
              height = 22

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])
              .clamp(true)

          var brush = d3.svg.brush()
              .x(x)
              .extent([scope.level, scope.level])
              .on('brush', brushed)

          var axis = svg.append('g')
              .attr('class', 'axis')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickValues([]))
          
          var domain = axis.select('.domain')
              .attr('transform', 'translate(0, 10)')

          domain.select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
              .attr('class', 'halo')

          var slider = svg.append('g')
              .attr('class', 'slider')
              .call(brush)

          slider.selectAll('.extent,.resize')
              .remove()

          slider.select('.background')
              .attr('height', height)

          var pointy = function () {
            var cx = x(1),
              cy = 10
            return {
              set: function (pt) {
                cx = pt
                return [
                  { x: cx - 6, y: cy - 6 },
                  { x: cx + 6, y: cy - 6 },
                  { x: cx + 6, y: cy + 6 },
                  { x: cx, y: cy + 10 },
                  { x: cx - 6, y: cy + 6 }
                ]
              }

            }
          }

          var line = d3.svg.line()
            .x(function (d) { return d.x })
            .y(function (d) { return d.y })

          var handle = slider.append('path')
              .attr('class', 'handle')
              .attr('d', line(pointy().set(x(scope.level))) + 'Z')

          // slider
          //     .call(brush.event)

          function brushed() {
            var value = brush.extent()[0]

            var v = x.invert(d3.mouse(this)[0])
            value = isNaN(v) ? value : v
            brush.extent([value, value])

            if (value) value = Math.round(value)

            handle.attr('d', line( pointy().set( x(value) ) ) + 'Z')
            $timeout(function () {
              scope.change = value - scope.level
            })
          }
        }
      }
    }
  })
  .directive('bar', function($window, Aspects) {
    return {
      restrict: 'EA',
      scope: {
        level: '=',
        diff: '=',
        name: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 40)

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch('level', function (diff) {
          scope.render()
        })

        scope.$watch('diff', function (diff) {
          scope.render()
        })

        scope.$watch('name', function () {
          scope.render()
        })

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var w = d3.select(element[0])[0][0].offsetWidth,
            width = w > 0 ? w : 100
            height = 40

          var x = d3.scale.linear()
              .domain([0, 100])
              .range([6, width - 6])

          var axis = svg.append('g')
              .attr('class', 'axis')
              .attr('transform', 'translate(0,' + (height - 20) + ')')

          axis.call(d3.svg.axis()
              .scale(x)
              .orient('bottom')
              .tickSize(0)
              .tickPadding(12))

          axis.select('.domain').remove()

          var barBack = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(100) - x(0))
              .style('fill', Aspects.getColor(scope.name, -1))

          var bar = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', x(scope.level) - x(0))
              .style('fill', Aspects.getColor(scope.name, 100))

          var diff = svg.append('rect')
              .attr('x', x(0))
              .attr('y', 4)
              .attr('height', 20)
              .attr('width', 0)
              .style('fill', Aspects.getColor(scope.name, 205))

          var text = svg.append('text')
              .attr('y', 14)
              .attr('dy', '.375em')
              .style('fill', '#000')
              .style('font-weight', '400')

          if (scope.diff > 0) {
            var d = x(scope.diff) - x(0)
            diff
                .attr('x', x(scope.level))
                .attr('width', d)

            text.text('+' + scope.diff)
            var w = text.style('width').replace('px','')

            if (x(100) - x(scope.level) - x(scope.diff) > w) {
              text
                .attr('x', x(scope.level) + x(scope.diff))
                .attr('dx',  4)
            } else {
              text
                .attr('x', x(100) - w) 
                .attr('dx',  -4)
            }
          } else if (scope.diff < 0) {
            var d = x(-scope.diff) - x(0)
            diff
                .attr('x', x(scope.level) - d)
                .attr('width', d)
                .style('fill', Aspects.getColor(scope.name, 40))

            text.text(scope.diff)

            text
              .attr('x', x(scope.level) + x(scope.diff))
              .attr('dx',  4)
          }
        }
      }
    }
  })
  .directive('graph', function ($window, Aspects) {
    return {

      restrict: 'EA',
      scope: {
        links: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .style('width', '100%')
          .style('height', 400)

        var force = d3.layout.force()
            .charge(-200)
            .linkDistance(200)

        window.onresize = function() {
          scope.$apply()
        }

        var names = Aspects.names()
        var nodes = _.map(names, function (e) {
          return {
            name: e
          }
        })

        var links = []

        scope.$watch('links', function (edges) {
          links = []
          _.each(edges, function (e1, k1) {
            _.each(e1, function (e2, k2) {
              if (e2) {
                links.push({
                  source: names.indexOf(k1),
                  target: names.indexOf(k2),
                  value: e2
                })
              }
            })
          })
          scope.render()
        }, true)

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.render = function () {
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
            height = 400

          force
            .size([width, height])
            .nodes(nodes)
            .links(links)
            .on('tick', tick)
            .start()

          // build the arrow.
          svg.append("svg:defs").selectAll("marker")
              .data(["end"])      // Different link/path types can be defined here
            .enter().append("svg:marker")    // This section adds in the arrows
              .attr("id", String)
              .attr("viewBox", "0 -5 10 10")
              .attr("refX", 15)
              .attr("refY", -1.5)
              .attr("markerWidth", 6)
              .attr("markerHeight", 6)
              .attr("orient", "auto")
            .append("svg:path")
              .attr("d", "M0,-5L10,0L0,5");

          var path = svg.append("svg:g").selectAll("path")
            .data(force.links())
          .enter().append("svg:path")
            .attr("class", "link")
            .attr("marker-end", "url(#end)");

          var circle = svg.append("g").selectAll("circle")
              .data(force.nodes())
            .enter().append("circle")
              .attr("r", 6)
              .style('fill', function (d) { return Aspects.getColor(d.name, 100) })
              .call(force.drag);

          var text = svg.append("g").selectAll("text")
              .data(force.nodes())
            .enter().append("text")
              .attr("x", 8)
              .attr("y", ".31em")
              .text(function(d) { return d.name; });

          var value = svg.append("g").selectAll(".value")
              .data(force.links())
            .enter().append("text")
              .text(function(d) { return d.value; });

          function tick () {
            path.attr("d", linkArc);
            circle.attr("transform", transform);
            text.attr("transform", transform);
            value
              .attr('x', function (d) { return weight(d).x })
              .attr('y', function (d) { return weight(d).y })
          }

          function linkArc (d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy);
            return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
          }

          function weight (d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y
            return {
              x: d.source.x + dx / 4 + dy / 6,
              y: d.source.y + dy / 4 - dx / 6,
            }
          }

          function transform(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }

        }

        scope.render()
      }

    }

  })
  .directive('pie', function ($window, Aspects, Tricycle) {
    return {
      restrict: 'EA',
      scope: {
        responses: '=',
        choice: '='
      },
      link: function(scope, element, attrs) {
        var svg = d3.select(element[0])
          .append('svg')
          .attr('class', 'pie')
          .style('width', '100%')

        window.onresize = function() {
          scope.$apply()
        }

        scope.$watch(function() {
          return angular.element($window)[0].innerWidth
        }, function() {
          scope.render()
        })

        scope.$watch('responses', function () {
          scope.render()
        }, true)

        scope.$watch('choice', function () {
          scope.render()
        }, true)

        var names = Aspects.names(),
          weights = _.map(names, function (e, i) {
            return Math.random()
          }),
          sum = _.reduce(weights, function (a, b) {
            return a + b
          }),
          data = _.map(names, function (e, i) {
            return {
              name: e,
              weight: weights[i] / sum
            }
          })

        scope.render = function () {
          if (!scope.choice) {
            weights = Tricycle.weights()
            data = _.map(names, function (e, i) {
            return {
              name: e,
              weight: weights[e]
            }
          })
          }
          console.log(weights)
          svg.selectAll('*').remove()

          var width = d3.select(element[0])[0][0].offsetWidth,
            height = width,
            radius = Math.min(width, height) / 2

          var arc = d3.svg.arc()
            .outerRadius(radius - 30)
            .innerRadius(0)

          var pie = d3.layout.pie()
            .sort(null)
            .value(function (d) { return d.weight })

          svg
              .attr('width', width)
              .attr('height', height)

          var g = svg.append('g')
              .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')
            .selectAll('.arc')
              .data(pie(data))
            .enter().append('g')
              .attr('class', function (d) { return 'arc ' + d.data.name.split(' ')[0] })

          g.append('path')
              .attr('d', arc)
              .style('fill', function (d) { return Aspects.getColor(d.data.name, 70) })
              .on('click', function (d) {
                clicked[d.data.name] = !clicked[d.data.name]
              })

          g.append('path')
              .attr('class', 'level')
              .attr('d', function (d) { return level(scope.responses[d.data.name].level)(d) })
              .style('fill', function (d) { return Aspects.getColor(d.data.name, 140) })
              // .on('click', function (d) {
              //   clicked[d.data.name] = !clicked[d.data.name]
              // })

          // g.append('text')
          //     .attr('transform', function (d) { return 'translate(' + arc.centroid(d) + ')' })
          //     .attr('dy', '.35em')
          //     .style('text-anchor', 'middle')
          //     .text(function(d) { return d.data.name })

          function cursor (d) {
            var pos = {
              x: d3.event.clientX - center.x,
              y: d3.event.clientY - center.y
            }
            var r = Math.sqrt(Math.pow(pos.x, 2) + Math.pow(pos.y, 2)),
              theta = Math.atan2(pos.y, pos.x) + Math.PI / 2
            return d3.svg.arc()
              .outerRadius(r)
              .innerRadius(r - 2)
              .startAngle(0)
              .endAngle(7)
            (d)
          }

          function level (r) {
            r = Math.sqrt(r / 100) * (radius - 30)
            return d3.svg.arc()
              .outerRadius(r)
              .innerRadius(0)
          }

          function setRadius (d) {
            var bounds = svg[0][0].getBoundingClientRect()
            var center = {
              x: bounds.left + width / 2,
              y: bounds.top + height / 2
            }
            var pos = {
              x: d3.event.clientX - center.x,
              y: d3.event.clientY - center.y
            }
            var r = Math.sqrt(Math.pow(pos.x, 2) + Math.pow(pos.y, 2)),
              theta = Math.atan2(pos.y, pos.x) + Math.PI / 2
            return d3.svg.arc()
              .outerRadius(Math.min(r, radius - 30))
              .innerRadius(0)
              .startAngle(d.startAngle)
              .endAngle(d.endAngle)
            (d)
          }

          var control = g.append('path')
              .style('fill', '#000')

          var clicked = {}

          // d3.selectAll('.arc').on('mousemove', function (d) {
          //   if (!clicked[d.data.name]) {
          //     d3.select(this).select('path.level')
          //     .attr('d', setRadius)
          //   }
          // })
        }
      }
    }
  })
